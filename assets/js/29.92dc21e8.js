(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{301:function(t,n,e){"use strict";e.r(n);var a=e(13),r=Object(a.a)({},(function(){var t=this,n=t._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"_1-开发流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-开发流程"}},[t._v("#")]),t._v(" 1.开发流程")]),t._v(" "),n("h3",{attrs:{id:"_1-controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-controller"}},[t._v("#")]),t._v(" 1.controller")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1.什么请求用什么注解去接收\n2.是否使用dto类来接收数据\n3.调用service去实现业务逻辑\n")])])]),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227092335.png",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"_2-service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-service"}},[t._v("#")]),t._v(" 2.service")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1.参数校验，避免非法操作\n\t参数非空验证，username不能重复，手机邮箱是否唯一、密码是否加密等\n2.注意业务逻辑，进行数据修改\n\t是否用到了其他的service、是否开启事务等\n\t新增用户时同时也要分配权限等\n3.整理数据，返回响应\n\t是否使用vo类等\n4.过程中\n\t使用字面量封装常量、抛出自定义的全局异常、使用stream流来整理数据\n")])])]),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227094713.png",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227094946.png",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227095133.png",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227095404.png",alt:""}})]),t._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227095516.png",alt:""}})]),t._v(" "),n("h3",{attrs:{id:"_3-mapper"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-mapper"}},[t._v("#")]),t._v(" 3.mapper")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("实现一些mybatis不好实现的业务\n")])])]),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230227095926.png",alt:""}})]),t._v(" "),n("h2",{attrs:{id:"_2-常用的工具类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-常用的工具类"}},[t._v("#")]),t._v(" 2.常用的工具类")]),t._v(" "),n("h3",{attrs:{id:"_2-1mybatisplus分页"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1mybatisplus分页"}},[t._v("#")]),t._v(" 2.1mybatisPlus分页")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;\nimport com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\n\n@Configuration\npublic class MbatisPlusConfig {\n\n    /**\n     * 3.4.0之后版本\n     * mybatis 分页拦截器\n     * @return\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-2redisconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2redisconfig"}},[t._v("#")]),t._v(" 2.2RedisConfig")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisConnectionFactory;\nimport org.springframework.data.redis.core.RedisTemplate;\nimport org.springframework.data.redis.serializer.StringRedisSerializer;\nimport xyz.zch1337.utils.FastJsonRedisSerializer;\n\n@Configuration\npublic class RedisConfig {\n\n    @Bean\n    @SuppressWarnings(value = { "unchecked", "rawtypes" })\n    public RedisTemplate<Object, Object> redisTemplate(RedisConnectionFactory connectionFactory)\n    {\n        RedisTemplate<Object, Object> template = new RedisTemplate<>();\n        template.setConnectionFactory(connectionFactory);\n\n        FastJsonRedisSerializer serializer = new FastJsonRedisSerializer(Object.class);\n\n        // 使用StringRedisSerializer来序列化和反序列化redis的key值\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setValueSerializer(serializer);\n\n        // Hash的key也采用StringRedisSerializer的序列化方式\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashValueSerializer(serializer);\n\n        template.afterPropertiesSet();\n        return template;\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-3webconfig"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3webconfig"}},[t._v("#")]),t._v(" 2.3WebConfig")]),t._v(" "),n("p",[t._v("跨域设置、日期转换器等")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import com.alibaba.fastjson.serializer.SerializeConfig;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport com.alibaba.fastjson.serializer.ToStringSerializer;\nimport com.alibaba.fastjson.support.config.FastJsonConfig;\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.List;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    // 开启跨域访问\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 设置允许跨域的路径\n        registry.addMapping("/**")\n                // 设置允许跨域请求的域名\n                .allowedOriginPatterns("*")\n                // 是否允许cookie\n                .allowCredentials(true)\n                // 设置允许的请求方式\n                .allowedMethods("GET", "POST", "DELETE", "PUT")\n                // 设置允许的header属性\n                .allowedHeaders("*")\n                // 跨域允许时间\n                .maxAge(3600);\n    }\n\n    // 配置转换器\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(fastJsonHttpMessageConverters());\n    }\n    // 转换日期格式\n    @Bean//使用@Bean注入fastJsonHttpMessageConvert\n    public HttpMessageConverter fastJsonHttpMessageConverters() {\n        //1.需要定义一个Convert转换消息的对象\n        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\n        fastJsonConfig.setDateFormat("yyyy-MM-dd HH:mm:ss");\n\n        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);\n\n        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        HttpMessageConverter<?> converter = fastConverter;\n        return converter;\n    }\n\n}\n')])])]),n("h3",{attrs:{id:"_2-4字面量封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4字面量封装"}},[t._v("#")]),t._v(" 2.4字面量封装")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public class SystemConstants\n{\n    /**\n     *  文章是草稿\n     */\n    public static final int ARTICLE_STATUS_DRAFT = 1;\n    /**\n     *  文章是正常发布状态\n     */\n    public static final int ARTICLE_STATUS_NORMAL = 0;\n\n    public static final String STATUS_NORMAL = "0";\n\n    /**\n     *  友链审核通过是正常状态\n     */\n    public static final String LINK_STATUS_NORMAL = "0";\n    /**\n     * 评论类型\n     */\n    public static final String ARTICLE_COMMENT = "0";\n    public static final String LINK_COMMENT = "1";\n\n    /**\n     *\n     */\n    public static final String MENU = "C";\n    public static final String BUTTON = "F";\n    /**\n     * 1为后台用户\n     */\n    public static final String ADMIN = "1";\n}\n')])])]),n("h3",{attrs:{id:"_2-5统一结果返回类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-5统一结果返回类"}},[t._v("#")]),t._v(" 2.5统一结果返回类")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import com.fasterxml.jackson.annotation.JsonInclude;\nimport xyz.zch1337.enums.AppHttpCodeEnum;\n\nimport java.io.Serializable;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class R<T> implements Serializable {\n    private Integer code;\n    private String msg;\n    private T data;\n\n    public R() {\n        this.code = AppHttpCodeEnum.SUCCESS.getCode();\n        this.msg = AppHttpCodeEnum.SUCCESS.getMsg();\n    }\n\n    public R(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    public R(Integer code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public R(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public static R errorResult(int code, String msg) {\n        R result = new R();\n        return result.error(code, msg);\n    }\n    public static R okResult() {\n        R result = new R();\n        return result;\n    }\n    public static R okResult(int code, String msg) {\n        R result = new R();\n        return result.ok(code, null, msg);\n    }\n\n    public static R okResult(Object data) {\n        R result = setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());\n        if(data!=null) {\n            result.setData(data);\n        }\n        return result;\n    }\n\n    public static R errorResult(AppHttpCodeEnum enums){\n        return setAppHttpCodeEnum(enums,enums.getMsg());\n    }\n\n    public static R errorResult(AppHttpCodeEnum enums, String msg){\n        return setAppHttpCodeEnum(enums,msg);\n    }\n\n    public static R setAppHttpCodeEnum(AppHttpCodeEnum enums){\n        return okResult(enums.getCode(),enums.getMsg());\n    }\n\n    private static R setAppHttpCodeEnum(AppHttpCodeEnum enums, String msg){\n        return okResult(enums.getCode(),msg);\n    }\n\n    public R<?> error(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n        return this;\n    }\n\n    public R<?> ok(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n        return this;\n    }\n\n    public R<?> ok(Integer code, T data, String msg) {\n        this.code = code;\n        this.data = data;\n        this.msg = msg;\n        return this;\n    }\n\n    public R<?> ok(T data) {\n        this.data = data;\n        return this;\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n\n}\n")])])]),n("h3",{attrs:{id:"_2-6httpcode状态码"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-6httpcode状态码"}},[t._v("#")]),t._v(" 2.6HttpCode状态码")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('public enum AppHttpCodeEnum {\n    // 成功\n    SUCCESS(200,"操作成功"),\n    // 登录\n    NEED_LOGIN(401,"需要登录后操作"),\n    NO_OPERATOR_AUTH(403,"无权限操作"),\n    SYSTEM_ERROR(500,"出现错误"),\n    USERNAME_EXIST(501,"用户名已存在"),\n    PHONENUMBER_EXIST(502,"手机号已存在"), EMAIL_EXIST(503, "邮箱已存在"),\n    REQUIRE_USERNAME(504, "必需填写用户名"),\n    LOGIN_ERROR(505,"用户名或密码错误"),\n    CONTENT_NOT_NULL(506, "评论内容不能为空"),\n    FILE_TYPE_ERROR(507, "文件类型错误,请上传png格式图片"),\n    USERNAME_NOT_NULL(508, "用户名不能为空"),\n    PASSWORD_NOT_NULL(509,"密码不能为空"),\n    NICKNAME_NOT_NULL(510,"昵称不能为空"),\n    EMAIL_NOT_NULL(511,"邮箱不能为空"),\n    NICKNAME_EXIST(512, "昵称已经存在"), PARENT_IS_ME(500, "修改菜单失败，上级菜单不能选择自己"), HAS_CHILD_MENU(500, "存在子菜单不允许删除"), NOT_DELETE_LOGINUSER(513, "不能删除当前操作的用户"),\n    REMOVE_ROLE_ADMIN(513, "超级管理员不能删除");\n    int code;\n    String msg;\n\n    AppHttpCodeEnum(int code, String errorMessage){\n        this.code = code;\n        this.msg = errorMessage;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-7自定义全局异常"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-7自定义全局异常"}},[t._v("#")]),t._v(" 2.7自定义全局异常")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import xyz.zch1337.enums.AppHttpCodeEnum;\n\npublic class SystemException extends RuntimeException{\n\n    private int code;\n\n    private String msg;\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public SystemException(AppHttpCodeEnum httpCodeEnum) {\n        super(httpCodeEnum.getMsg());\n        this.code = httpCodeEnum.getCode();\n        this.msg = httpCodeEnum.getMsg();\n    }\n\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import lombok.extern.slf4j.Slf4j;\nimport org.springframework.web.bind.annotation.ExceptionHandler;\nimport org.springframework.web.bind.annotation.RestControllerAdvice;\nimport xyz.zch1337.domain.R;\nimport xyz.zch1337.enums.AppHttpCodeEnum;\nimport xyz.zch1337.exception.SystemException;\n\n@RestControllerAdvice\n@Slf4j\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(SystemException.class)\n    public R systemExceptionHandler(SystemException e){\n        //打印异常信息\n        log.error("出现了异常！ {}",e);\n        //从异常对象中获取提示信息封装返回\n        return R.errorResult(e.getCode(),e.getMsg());\n    }\n\n\n    @ExceptionHandler(Exception.class)\n    public R exceptionHandler(Exception e){\n        //打印异常信息\n        log.error("出现了异常！ {}",e);\n        //从异常对象中获取提示信息封装返回\n        return R.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),e.getMessage());\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-8mybatis自动插入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-8mybatis自动插入"}},[t._v("#")]),t._v(" 2.8mybatis自动插入")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;\nimport org.apache.ibatis.reflection.MetaObject;\nimport org.springframework.stereotype.Component;\nimport xyz.zch1337.utils.SecurityUtils;\n\nimport java.util.Date;\n\n// 自动插入\n@Component\npublic class MyMetaObjectHandler implements MetaObjectHandler {\n    @Override\n    public void insertFill(MetaObject metaObject) {\n        Long userId = null;\n//        try {\n            userId = SecurityUtils.getUserId();\n//        } catch (Exception e) {\n//            e.printStackTrace();\n//            userId = -1L;//表示是自己创建\n//        }\n        this.setFieldValByName("createTime", new Date(), metaObject);\n        this.setFieldValByName("createBy",userId , metaObject);\n        this.setFieldValByName("updateTime", new Date(), metaObject);\n        this.setFieldValByName("updateBy", userId, metaObject);\n    }\n\n    @Override\n    public void updateFill(MetaObject metaObject) {\n        Long userId = null;\n        try {\n        userId = SecurityUtils.getUserId();\n        } catch (Exception e) {\n            e.printStackTrace();\n            userId = -1L;//表示是自己创建\n        }\n        this.setFieldValByName("updateTime", new Date(), metaObject);\n        this.setFieldValByName(" ", userId, metaObject);\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-9bean拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-9bean拷贝"}},[t._v("#")]),t._v(" 2.9Bean拷贝")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import org.springframework.beans.BeanUtils;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class BeanCopyUtils {\n\n    private BeanCopyUtils() {\n    }\n\n    public static <V> V copyBean(Object source,Class<V> clazz) {\n        //创建目标对象\n        V result = null;\n        try {\n            result = clazz.newInstance();\n            //实现属性copy\n            BeanUtils.copyProperties(source, result);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        //返回结果\n        return result;\n    }\n    public static <O,V> List<V> copyBeanList(List<O> list, Class<V> clazz){\n        return list.stream()\n                .map(o -> copyBean(o, clazz))\n                .collect(Collectors.toList());\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-10redisjson序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-10redisjson序列化"}},[t._v("#")]),t._v(" 2.10RedisJSON序列化")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import com.alibaba.fastjson.JSON;\nimport com.alibaba.fastjson.parser.ParserConfig;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport com.fasterxml.jackson.databind.JavaType;\nimport com.fasterxml.jackson.databind.type.TypeFactory;\nimport org.springframework.data.redis.serializer.RedisSerializer;\nimport org.springframework.data.redis.serializer.SerializationException;\n\nimport java.nio.charset.Charset;\n\n/**\n * Redis使用FastJson序列化\n * \n * @author sg\n */\npublic class FastJsonRedisSerializer<T> implements RedisSerializer<T>\n{\n\n    public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");\n\n    private Class<T> clazz;\n\n    static\n    {\n        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);\n    }\n\n    public FastJsonRedisSerializer(Class<T> clazz)\n    {\n        super();\n        this.clazz = clazz;\n    }\n\n    @Override\n    public byte[] serialize(T t) throws SerializationException\n    {\n        if (t == null)\n        {\n            return new byte[0];\n        }\n        return JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(DEFAULT_CHARSET);\n    }\n\n    @Override\n    public T deserialize(byte[] bytes) throws SerializationException\n    {\n        if (bytes == null || bytes.length <= 0)\n        {\n            return null;\n        }\n        String str = new String(bytes, DEFAULT_CHARSET);\n\n        return JSON.parseObject(str, clazz);\n    }\n\n\n    protected JavaType getJavaType(Class<?> clazz)\n    {\n        return TypeFactory.defaultInstance().constructType(clazz);\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-11文件路径生成"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-11文件路径生成"}},[t._v("#")]),t._v(" 2.11文件路径生成")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import java.text.SimpleDateFormat;\nimport java.util.Date;\nimport java.util.UUID;\n\npublic class PathUtils {\n\n    public static String generateFilePath(String fileName){\n        //根据日期生成路径   2022/1/15/\n        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd/");\n        String datePath = sdf.format(new Date());\n        //uuid作为文件名\n        String uuid = UUID.randomUUID().toString().replaceAll("-", "");\n        //后缀和文件后缀一致\n        int index = fileName.lastIndexOf(".");\n        // test.jpg -> .jpg\n        String fileType = fileName.substring(index);\n        return new StringBuilder().append(datePath).append(uuid).append(fileType).toString();\n    }\n}\n')])])]),n("h3",{attrs:{id:"_2-12securityutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-12securityutils"}},[t._v("#")]),t._v(" 2.12SecurityUtils")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("import org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport xyz.zch1337.domain.entity.LoginUser;\n\npublic class SecurityUtils\n{\n\n    /**\n     * 获取用户\n     **/\n    public static LoginUser getLoginUser()\n    {\n        return (LoginUser) getAuthentication().getPrincipal();\n    }\n\n    /**\n     * 获取Authentication\n     */\n    public static Authentication getAuthentication() {\n        return SecurityContextHolder.getContext().getAuthentication();\n    }\n\n    public static Boolean isAdmin(){\n        Long id = getLoginUser().getUser().getId();\n        return id != null && id.equals(1L);\n    }\n\n    public static Long getUserId() {\n        return getLoginUser().getUser().getId();\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-13webutils"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-13webutils"}},[t._v("#")]),t._v(" 2.13WebUtils")]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('import javax.servlet.http.HttpServletResponse;\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLEncoder;\n\npublic class WebUtils\n{\n    /**\n     * 将字符串渲染到客户端\n     * \n     * @param response 渲染对象\n     * @param string 待渲染的字符串\n     * @return null\n     */\n    public static void renderString(HttpServletResponse response, String string) {\n        try\n        {\n            response.setStatus(200);\n            response.setContentType("application/json");\n            response.setCharacterEncoding("utf-8");\n            response.getWriter().print(string);\n        }\n        catch (IOException e)\n        {\n            e.printStackTrace();\n        }\n    }\n\n\n    public static void setDownLoadHeader(String filename, HttpServletResponse response) throws UnsupportedEncodingException {\n        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");\n        response.setCharacterEncoding("utf-8");\n        String fname= URLEncoder.encode(filename,"UTF-8").replaceAll("\\\\+", "%20");\n        response.setHeader("Content-disposition","attachment; filename="+fname);\n    }\n}\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);