(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{294:function(e,n,t){"use strict";t.r(n);var r=t(13),s=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"_1-添加依赖和配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加依赖和配置"}},[e._v("#")]),e._v(" 1.添加依赖和配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        \x3c!--SpringSecurity启动器--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        \x3c!--redis依赖--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        \x3c!--fastjson依赖--\x3e\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n        </dependency>\n        \x3c!--jwt依赖--\x3e\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n        </dependency>\n        \x3c!--mybatisPlus依赖--\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        \x3c!--mysql数据库驱动--\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("spring:\n  datasource:\n    url: jdbc:mysql://124.222.237.176:3306/zch_blog?characterEncoding=utf-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\n  redis:\n    host: 124.222.237.176\n    port: 6379\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n")])])]),n("h1",{attrs:{id:"_2-自定义userdetailsserviceimpl-待完善"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-自定义userdetailsserviceimpl-待完善"}},[e._v("#")]),e._v(" 2.自定义UserDetailsServiceImpl -- 待完善")]),e._v(" "),n("p",[e._v("实现UserDetailsService")]),e._v(" "),n("p",[e._v("步骤：")]),e._v(" "),n("ol",[n("li",[e._v("根据username去查数据库")]),e._v(" "),n("li",[e._v("判断是否查到用户")]),e._v(" "),n("li",[e._v("查询权限信息")]),e._v(" "),n("li",[e._v("返回用户信息 需要写一个类LoginUser")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class UserDetailsServiceImpl implements UserDetailsService {\n    @Autowired\n    private UserMapper userMapper;\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        // 根据username去查数据库\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUserName, username);\n        User user = userMapper.selectOne(queryWrapper);\n        // 判断是否查到用户 没查到抛出异常\n        if (Objects.isNull(user)) {\n            throw new RuntimeException("用户不存在");\n        }\n        // 查询权限信息\n        // TODO 查询权限信息\n        // 这里 后台用户才需要 权限封装\n        if (user.getType().equals(SystemConstants.ADMIN)) {\n            List<String> perms = menuService.selectPermsByUserId(user.getId());\n            return new LoginUser(user, perms);\n        }      \n        // 返回用户信息\n        return new LoginUser(user);\n    }\n}\n')])])]),n("p",[e._v("LoginUser")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport org.springframework.security.core.GrantedAuthority;\nimport org.springframework.security.core.userdetails.UserDetails;\n\nimport java.util.Collection;\nimport java.util.List;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class LoginUser implements UserDetails {\n\n    private User user;\n    // 这里采用自定义权限校验方法\n    private List<String> authorityList;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUserName();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n")])])]),n("h1",{attrs:{id:"_3-写登录接口和service"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-写登录接口和service"}},[e._v("#")]),e._v(" 3.写登录接口和service")]),e._v(" "),n("p",[e._v("在实现类中")]),e._v(" "),n("p",[e._v("步骤：")]),e._v(" "),n("ol",[n("li",[e._v("调用security验证")]),e._v(" "),n("li",[e._v("判断是否认证通过")]),e._v(" "),n("li",[e._v("根据userId生成token")]),e._v(" "),n("li",[e._v("用户信息存入redis")]),e._v(" "),n("li",[e._v("把token和userInfo封装并返回")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Api(tags = "博客登录")\n@RestController\npublic class BlogLoginController {\n    @Autowired\n    private BlogLoginService blogLoginService;\n    @ApiOperation(value = "登录接口")\n    @PostMapping("/login")\n    public R login(@RequestBody User user) {\n        if (!StringUtils.hasText(user.getUserName())) {\n            // 提示 必须要传用户名\n            throw new SystemException(AppHttpCodeEnum.REQUIRE_USERNAME);\n        }\n        return blogLoginService.login(user);\n    }\n    @ApiOperation("退出登录")\n    @PostMapping("/logout")\n    public R logout() {\n        return blogLoginService.logout();\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface BlogLoginService {\n    R login(User user);\n\n    R logout();\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class BlogLoginServiceImpl implements BlogLoginService {\n    @Autowired\n    private AuthenticationManager authenticationManager;\n    @Autowired\n    private RedisCache redisCache;\n    @Override\n    public R login(User user) {\n    \t//调用security验证\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(user.getUserName(), user.getPassword());\n        Authentication authenticate = authenticationManager.authenticate(authenticationToken);\n        //判断是否认证通过\n        if (Objects.isNull(authenticate)) {\n            throw new RuntimeException("用户名或密码错误");\n        }\n        //获取userId生成token\n        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();\n        String userId = loginUser.getUser().getId().toString();\n        String jwt = JwtUtil.createJWT(userId);\n        //把用户信息存入redis\n        redisCache.setCacheObject("bloglogin:" + userId, loginUser);\n        //把token和userInfo封装并返回\n        UserInfoVo userInfoVo = BeanCopyUtils.copyBean(loginUser.getUser(), UserInfoVo.class);\n        BlogUserLoginVo vo = new BlogUserLoginVo(jwt, userInfoVo);\n        return R.okResult(vo);\n    }\n\n    @Override\n    public R logout() {\n        //获取token 解析获取userid\n        LoginUser loginUser = (LoginUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        //获取userid\n        String userId = loginUser.getUser().getId().toString();\n        // 从redis中删除记录\n        redisCache.deleteObject("bloglogin:" + userId);\n        // 响应\n        return R.okResult();\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SecurityConfig配置\n放开登录接口\n.antMatchers("/login").anonymous()\n\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers("/login").anonymous()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n\n        http.logout().disable();\n        //允许跨域\n        http.cors();\n    }\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n}\n')])])]),n("h1",{attrs:{id:"_4-jwt登录校验过滤器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-jwt登录校验过滤器"}},[e._v("#")]),e._v(" 4.JWT登录校验过滤器")]),e._v(" "),n("p",[e._v("通过token来验证 是否认证")]),e._v(" "),n("p",[e._v("步骤：")]),e._v(" "),n("ol",[n("li",[e._v("获取token")]),e._v(" "),n("li",[e._v("解析token获取其中的userid")]),e._v(" "),n("li",[e._v("从redis中获取用户信息")]),e._v(" "),n("li",[e._v("存入SecurityContextHolder")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n    @Autowired\n    private RedisCache redisCache;\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        // 从请求头上拿token\n        String token = request.getHeader("token");\n        if (!StringUtils.hasText(token)) {\n            // 没有token\n            // 说明这个接口不需要登录 直接放行\n            filterChain.doFilter(request, response);\n            return;\n        }\n        // 解析获取userId\n        Claims jwt = null;\n        try {\n            jwt = JwtUtil.parseJWT(token);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // token超时 token非法\n            // 响应给前端需要重新登录\n            R r = R.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(r));\n            return;\n        }\n        String userId = jwt.getSubject();\n        // 根据userId去redis查信息\n        LoginUser loginUser = redisCache.getCacheObject("bloglogin:" + userId);\n        // 如果获取不到\n        if (Objects.isNull(loginUser)) {\n            // 说明登录过期\n            R r = R.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(r));\n            return;\n        }\n        // 存入SecurityContextHolder\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(loginUser, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SecurityConfig配置\n\n//把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers("/login").anonymous()\n                //jwt过滤器测试用，如果测试没有问题吧这里删除了\n                .antMatchers("/link/getAllLink").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n')])])]),n("h1",{attrs:{id:"_5-认证授权失败处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-认证授权失败处理"}},[e._v("#")]),e._v(" 5.认证授权失败处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        authException.printStackTrace();\n        //InsufficientAuthenticationException\n        //BadCredentialsException\n        ResponseResult result = null;\n        if(authException instanceof BadCredentialsException){\n            result = ResponseResult.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),authException.getMessage());\n        }else if(authException instanceof InsufficientAuthenticationException){\n            result = ResponseResult.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n        }else{\n            result = ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),"认证或授权失败");\n        }\n        //响应给前端\n        WebUtils.renderString(response, JSON.toJSONString(result));\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component\npublic class AccessDeniedHandlerImpl implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException accessDeniedException) throws IOException, ServletException {\n        accessDeniedException.printStackTrace();\n        ResponseResult result = ResponseResult.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);\n        //响应给前端\n        WebUtils.renderString(response, JSON.toJSONString(result));\n    }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('配置Security异常处理器\n\n\n@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n    @Autowired\n    AuthenticationEntryPoint authenticationEntryPoint;\n    @Autowired\n    AccessDeniedHandler accessDeniedHandler;\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers("/login").anonymous()\n                //jwt过滤器测试用，如果测试没有问题吧这里删除了\n                .antMatchers("/link/getAllLink").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);\n\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n        http.cors();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n}\n')])])]),n("h1",{attrs:{id:"_6-统一异常处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-统一异常处理"}},[e._v("#")]),e._v(" 6.统一异常处理")]),e._v(" "),n("p",[e._v("处理非法情况")]),e._v(" "),n("p",[e._v("比如 前端传的用户名非空")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("SystemException\n\npublic class SystemException extends RuntimeException{\n\n    private int code;\n\n    private String msg;\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public SystemException(AppHttpCodeEnum httpCodeEnum) {\n        super(httpCodeEnum.getMsg());\n        this.code = httpCodeEnum.getCode();\n        this.msg = httpCodeEnum.getMsg();\n    }\n    \n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('GlobalExceptionHandler\n\n@RestControllerAdvice\n@Slf4j\npublic class GlobalExceptionHandler {\n\n    @ExceptionHandler(SystemException.class)\n    public ResponseResult systemExceptionHandler(SystemException e){\n        //打印异常信息\n        log.error("出现了异常！ {}",e);\n        //从异常对象中获取提示信息封装返回\n        return ResponseResult.errorResult(e.getCode(),e.getMsg());\n    }\n\n\n    @ExceptionHandler(Exception.class)\n    public ResponseResult exceptionHandler(Exception e){\n        //打印异常信息\n        log.error("出现了异常！ {}",e);\n        //从异常对象中获取提示信息封装返回\n        return ResponseResult.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),e.getMessage());\n    }\n}\n')])])]),n("h1",{attrs:{id:"_7-退出登录接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-退出登录接口"}},[e._v("#")]),e._v(" 7.退出登录接口")]),e._v(" "),n("p",[e._v("步骤：")]),e._v(" "),n("ol",[n("li",[e._v("获取token 解析获取userid")]),e._v(" "),n("li",[e._v("删除redis中的用户信息")]),e._v(" "),n("li",[e._v("响应")])]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SecurityConfig \n要关闭默认的退出登录功能。并且要配置我们的退出登录接口需要认证才能访问\n\n//注销接口需要认证才能访问\n.antMatchers("/logout").authenticated()\n\n//关闭默认的注销接口\nhttp.logout().disable();\n')])])]),n("h1",{attrs:{id:"_8-权限控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-权限控制"}},[e._v("#")]),e._v(" 8.权限控制")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 这里采用自定义权限校验方法\nSecurityConfig中\n@EnableGlobalMethodSecurity(prePostEnabled = true)\n\n写一个类\n//自定义权限校验方法\n@Service("ps")\npublic class PermissionService {\n\n    @Autowired\n    private MenuService menuService;\n\n    /**\n     * 判断当前用户是否具有权限\n     * @param permission\n     * @return\n     */\n    public boolean hasPermission(String permission) {\n        // 获取当前用户的权限列表\n        // 如果是admin\n        if (SecurityUtils.isAdmin()) {\n            return true;\n        }\n        List<String> perms = menuService.selectPermsByUserId(SecurityUtils.getUserId());\n        return perms.contains(permission);\n    }\n}\n\n在接口上 添加注解\n    @PreAuthorize("@ps.hasPermission(\'321:1231:123\')")\n    @GetMapping("/list")\n    public R<PageVo> list(Integer pageNum, Integer pageSize, TagListDto tagListDto) {\n        return tagService.pageTagList(pageNum, pageSize, tagListDto);\n    }\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);