(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{304:function(e,n,t){"use strict";t.r(n);var r=t(13),a=Object(r.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-搭建模块化项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-搭建模块化项目"}},[e._v("#")]),e._v(" 1.搭建模块化项目")]),e._v(" "),n("h3",{attrs:{id:"_1-建一个空的父项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-建一个空的父项目"}},[e._v("#")]),e._v(" 1.建一个空的父项目")]),e._v(" "),n("h3",{attrs:{id:"_2-新建子模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-新建子模块"}},[e._v("#")]),e._v(" 2.新建子模块")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230114172606.png",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"_3-配置pom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-配置pom"}},[e._v("#")]),e._v(" 3.配置pom")]),e._v(" "),n("h4",{attrs:{id:"父模块"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#父模块"}},[e._v("#")]),e._v(" 父模块")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>xyz.zch1337</groupId>\n    <artifactId>zch-project</artifactId>\n    <packaging>pom</packaging>\n    <version>1.0-SNAPSHOT</version>\n    <modules>\n        <module>zch-framework</module>\n        <module>zch-admin</module>\n    </modules>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <java.version>1.8</java.version>\n    </properties>\n    \x3c!--进行版本控制--\x3e\n    <dependencyManagement>\n        <dependencies>\n            \x3c!-- SpringBoot的依赖配置--\x3e\n            <dependency>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-dependencies</artifactId>\n                <version>2.5.0</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n            \x3c!--fastjson依赖--\x3e\n            <dependency>\n                <groupId>com.alibaba</groupId>\n                <artifactId>fastjson</artifactId>\n                <version>1.2.33</version>\n            </dependency>\n            \x3c!--jwt依赖--\x3e\n            <dependency>\n                <groupId>io.jsonwebtoken</groupId>\n                <artifactId>jjwt</artifactId>\n                <version>0.9.0</version>\n            </dependency>\n            \x3c!--mybatisPlus依赖--\x3e\n            <dependency>\n                <groupId>com.baomidou</groupId>\n                <artifactId>mybatis-plus-boot-starter</artifactId>\n                <version>3.4.3</version>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n    \x3c!--打包配置--\x3e\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.apache.maven.plugins</groupId>\n                <artifactId>maven-compiler-plugin</artifactId>\n                <version>3.1</version>\n                <configuration>\n                    <source>${java.version}</source>\n                    <target>${java.version}</target>\n                    <encoding>${project.build.sourceEncoding}</encoding>\n                </configuration>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n')])])]),n("h4",{attrs:{id:"zch-framework"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zch-framework"}},[e._v("#")]),e._v(" zch-framework")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <parent>\n        <artifactId>zch-project</artifactId>\n        <groupId>xyz.zch1337</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>zch-framework</artifactId>\n\n    <properties>\n        <maven.compiler.source>8</maven.compiler.source>\n        <maven.compiler.target>8</maven.compiler.target>\n    </properties>\n\n    <dependencies>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        \x3c!--lombk--\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n        \x3c!--junit--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            \x3c!--            <scope>test</scope>--\x3e\n        </dependency>\n        \x3c!--SpringSecurity启动器--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-security</artifactId>\n        </dependency>\n        \x3c!--redis依赖--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-data-redis</artifactId>\n        </dependency>\n        \x3c!--fastjson依赖--\x3e\n        <dependency>\n            <groupId>com.alibaba</groupId>\n            <artifactId>fastjson</artifactId>\n        </dependency>\n        \x3c!--jwt依赖--\x3e\n        <dependency>\n            <groupId>io.jsonwebtoken</groupId>\n            <artifactId>jjwt</artifactId>\n        </dependency>\n        \x3c!--mybatisPlus依赖--\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        \x3c!--mysql数据库驱动--\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n\n        \x3c!--AOP--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n\n\n    </dependencies>\n\n</project>\n')])])]),n("h4",{attrs:{id:"zch-admin"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#zch-admin"}},[e._v("#")]),e._v(" zch-admin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8"?>\n<project xmlns="http://maven.apache.org/POM/4.0.0"\n         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">\n    <parent>\n        <artifactId>zch-project</artifactId>\n        <groupId>xyz.zch1337</groupId>\n        <version>1.0-SNAPSHOT</version>\n    </parent>\n    <modelVersion>4.0.0</modelVersion>\n\n    <artifactId>zch-admin</artifactId>\n\n    <dependencies>\n    \x3c!--引入共用模块--\x3e\n        <dependency>\n            <groupId>xyz.zch1337</groupId>\n            <artifactId>zch-framework</artifactId>\n            <version>1.0-SNAPSHOT</version>\n        </dependency>\n    </dependencies>\n\n</project>\n')])])]),n("h2",{attrs:{id:"_2-springboot和mybatispuls整合配置测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-springboot和mybatispuls整合配置测试"}},[e._v("#")]),e._v(" 2.SpringBoot和MybatisPuls整合配置测试")]),e._v(" "),n("h3",{attrs:{id:"配置yml文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置yml文件"}},[e._v("#")]),e._v(" 配置yml文件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("server:\n  port: 7777\nspring:\n  datasource:\n    url: jdbc:mysql://124.222.237.176:22135/ruoyi?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8\n    username: root\n    password: zhuchenghao123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n\n")])])]),n("h3",{attrs:{id:"配置启动类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置启动类"}},[e._v("#")]),e._v(" 配置启动类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@SpringBootApplication\n@MapperScan("xyz.zch1337.mapper") // mybatis包扫描\npublic class ZCHAdminApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ZCHAdminApplication.class, args);\n    }\n}\n')])])]),n("h3",{attrs:{id:"使用easycode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用easycode"}},[e._v("#")]),e._v(" 使用easycode")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20230114200104.png",alt:""}})]),e._v(" "),n("h3",{attrs:{id:"编写测试接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#编写测试接口"}},[e._v("#")]),e._v(" 编写测试接口")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('package xyz.zch1337.controller;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RestController;\nimport xyz.zch1337.entity.User;\nimport xyz.zch1337.service.UserService;\n\nimport java.util.List;\n\n@RestController\npublic class TestController {\n\n    @Autowired\n    private UserService userService;\n\n    @GetMapping("/test")\n    public String test(){\n        List<User> list = userService.list();\n        System.out.println(list);\n        return "123";\n    }\n}\n')])])]),n("h3",{attrs:{id:"测试成功"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试成功"}},[e._v("#")]),e._v(" 测试成功")]),e._v(" "),n("h2",{attrs:{id:"_3-根据id查询权限-角色"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-根据id查询权限-角色"}},[e._v("#")]),e._v(" 3.根据id查询权限/角色")]),e._v(" "),n("p",[e._v("RoleMapper")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface RoleMapper extends BaseMapper<Role> {\n    /***\n     * 根据用户id查询Roles\n     * @param userId\n     * @return\n     */\n    List<String> selectRolesByUserId(Long userId);\n\n}\n")])])]),n("p",[e._v("xml")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >\n<mapper namespace="xyz.zch1337.mapper.RoleMapper">\n    <select id="selectRolesByUserId" resultType="java.lang.String">\n        SELECT role_key\n        from sys_role\n        where role_id in (SELECT role_id\n            from sys_user_role\n            where user_id = #{userId})\n            and status = 0\n            and del_flag = 0\n    </select>\n</mapper>\n')])])]),n("h2",{attrs:{id:"_4-swagger2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-swagger2"}},[e._v("#")]),e._v(" 4.Swagger2")]),e._v(" "),n("h3",{attrs:{id:"依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#依赖"}},[e._v("#")]),e._v(" 依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n            <version>2.9.2</version>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n            <version>2.9.2</version>\n        </dependency>xxxxxxxxxx <dependency>    <groupId>com.github.xiaoymin</groupId>    <artifactId>knife4j-spring-boot-starter</artifactId></dependency>        <dependency>            <groupId>io.springfox</groupId>            <artifactId>springfox-swagger2</artifactId>            <version>2.9.2</version>        </dependency>        <dependency>            <groupId>io.springfox</groupId>            <artifactId>springfox-swagger-ui</artifactId>            <version>2.9.2</version>        </dependency>\n")])])]),n("h3",{attrs:{id:"启用swagger2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#启用swagger2"}},[e._v("#")]),e._v(" 启用Swagger2")]),e._v(" "),n("p",[e._v("在启动类上或者配置类加 @EnableSwagger2 注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@SpringBootApplication\n@MapperScan("xyz.zch1337.mapper") // mybatis包扫描\n@EnableSwagger2\npublic class ZCHAdminApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ZCHAdminApplication.class, args);\n    }\n}\n')])])]),n("h3",{attrs:{id:"配置类和接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置类和接口"}},[e._v("#")]),e._v(" 配置类和接口")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Api(tags = "评论",description = "评论相关接口")\n@ApiOperation(value = "友链评论列表",notes = "获取一页友链评论")\n')])])]),n("h3",{attrs:{id:"测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#测试"}},[e._v("#")]),e._v(" 测试")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("http://localhost:7777/swagger-ui.html\n")])])]),n("h2",{attrs:{id:"_5-springcurity登录登出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-springcurity登录登出"}},[e._v("#")]),e._v(" 5.springcurity登录登出")]),e._v(" "),n("h3",{attrs:{id:"前提"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前提"}},[e._v("#")]),e._v(" 前提")]),e._v(" "),n("p",[e._v("1.根据userName查询用户")]),e._v(" "),n("p",[e._v("2.根据用户id查询权限")]),e._v(" "),n("h3",{attrs:{id:"_1-userdetailserviceimpl"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-userdetailserviceimpl"}},[e._v("#")]),e._v(" 1.UserDetailServiceImpl")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class UserDetailServiceImpl implements UserDetailsService {\n\n    @Autowired\n    private UserMapper userMapper;\n\n    @Autowired\n    private RoleMapper roleMapper;\n\n    @Override\n    public UserDetails loadUserByUsername(String userName) throws UsernameNotFoundException {\n        // 根据userName查数据\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<User>();\n        queryWrapper.eq(User::getUserName, userName);\n        User user = userMapper.selectOne(queryWrapper);\n        if(Objects.isNull(user)){\n            // 异常\n            throw new RuntimeException("用户不存在");\n        }\n        // 根据用户id查询权限\n        List<String> roles = roleMapper.selectRolesByUserId(user.getUserId());\n        return new LoginUser(user, roles);\n    }\n}\n')])])]),n("p",[e._v("LoginUser")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class LoginUser implements UserDetails {\n\n    private User user;\n\n    // 这里采用自定义权限校验方法\n    private List<String> authorityList;\n\n    @Override\n    public Collection<? extends GrantedAuthority> getAuthorities() {\n        return null;\n    }\n\n    @Override\n    public String getPassword() {\n        return user.getPassword();\n    }\n\n    @Override\n    public String getUsername() {\n        return user.getUserName();\n    }\n\n    @Override\n    public boolean isAccountNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isAccountNonLocked() {\n        return true;\n    }\n\n    @Override\n    public boolean isCredentialsNonExpired() {\n        return true;\n    }\n\n    @Override\n    public boolean isEnabled() {\n        return true;\n    }\n}\n")])])]),n("h3",{attrs:{id:"_2-登录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-登录"}},[e._v("#")]),e._v(" 2.登录")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RestController\n@Api(tags = "登录登出接口")\npublic class LoginController {\n\n    @Autowired\n    private LoginService loginService;\n\n    @PostMapping("/login")\n    @ApiOperation(value = "登录")\n    public R login(@RequestBody UserDto userDto){\n        return loginService.login(userDto);\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface LoginService {\n    /**\n     * 登录接口\n     * @param userDto\n     * @return\n     */\n    R login(UserDto userDto);\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Service\npublic class LoginServiceImpl implements LoginService {\n\n    @Autowired\n    private AuthenticationManager authenticationManager;\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Override\n    public R login(UserDto userDto) {\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(userDto.getUserName(),userDto.getPassword());\n        Authentication authenticate = authenticationManager.authenticate(authenticationToken);\n        if(Objects.isNull(authenticate)){\n            throw new RuntimeException("密码错误");\n        }\n        // 根据id生成jwt并存入redis\n        LoginUser loginUser = (LoginUser) authenticate.getPrincipal();\n        String userId = loginUser.getUser().getUserId().toString();\n        String token = JwtUtil.createJWT(userId);\n        redisCache.setCacheObject("login:"+userId, loginUser);\n        // 响应\n        LoginVo loginVo = new LoginVo();\n        loginVo.setToken(token);\n        return R.okResult(loginVo);\n    }\n}\n')])])]),n("h3",{attrs:{id:"_3-token校验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-token校验"}},[e._v("#")]),e._v(" 3.token校验")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\npublic class JwtAuthenticationTokenFilter extends OncePerRequestFilter {\n    @Autowired\n    private RedisCache redisCache;\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        // 从请求头上拿token\n        String token = request.getHeader("token");\n        if (!StringUtils.hasText(token)) {\n            // 没有token\n            // 说明这个接口不需要登录 直接放行\n            filterChain.doFilter(request, response);\n            return;\n        }\n        // 解析获取userId\n        Claims jwt = null;\n        try {\n            jwt = JwtUtil.parseJWT(token);\n        } catch (Exception e) {\n            e.printStackTrace();\n            // token超时 token非法\n            // 响应给前端需要重新登录\n            R r = R.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(r));\n            return;\n        }\n        String userId = jwt.getSubject();\n        // 根据userId去redis查信息\n        LoginUser loginUser = redisCache.getCacheObject("login:" + userId);\n        // 如果获取不到\n        if (Objects.isNull(loginUser)) {\n            // 说明登录过期\n            R r = R.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n            WebUtils.renderString(response, JSON.toJSONString(r));\n            return;\n        }\n        // 存入SecurityContextHolder\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(loginUser, null, null);\n        SecurityContextHolder.getContext().setAuthentication(authenticationToken);\n        filterChain.doFilter(request, response);\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        @Autowired\n        private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n        \n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Configuration\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Bean\n    public PasswordEncoder passwordEncoder(){\n        return new BCryptPasswordEncoder();\n    }\n\n    @Autowired\n    private JwtAuthenticationTokenFilter jwtAuthenticationTokenFilter;\n\n\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http\n                //关闭csrf\n                .csrf().disable()\n                //不通过Session获取SecurityContext\n                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                .and()\n                .authorizeRequests()\n                // 对于登录接口 允许匿名访问\n                .antMatchers("/login").anonymous()\n                .antMatchers("/test").authenticated()\n                // 除上面外的所有请求全部不需要认证即可访问\n                .anyRequest().permitAll();\n\n\n        http.logout().disable();\n        //把jwtAuthenticationTokenFilter添加到SpringSecurity的过滤器链中\n        http.addFilterBefore(jwtAuthenticationTokenFilter, UsernamePasswordAuthenticationFilter.class);\n        //允许跨域\n\n        http.cors();\n    }\n    @Override\n    @Bean\n    public AuthenticationManager authenticationManagerBean() throws Exception {\n        return super.authenticationManagerBean();\n    }\n}\n')])])]),n("h3",{attrs:{id:"_4-认证授权失败处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-认证授权失败处理"}},[e._v("#")]),e._v(" 4.认证授权失败处理")]),e._v(" "),n("p",[e._v("​\tAuthenticationEntryPoint 认证失败处理器")]),e._v(" "),n("p",[e._v("​\tAccessDeniedHandler 授权失败处理器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@Component\npublic class AuthenticationEntryPointImpl implements AuthenticationEntryPoint {\n\n    @Override\n    public void commence(HttpServletRequest request, HttpServletResponse response, AuthenticationException authException) throws IOException, ServletException {\n        authException.printStackTrace();\n        //InsufficientAuthenticationException\n        //BadCredentialsException\n        R result = null;\n        if(authException instanceof BadCredentialsException){\n            result = R.errorResult(AppHttpCodeEnum.LOGIN_ERROR.getCode(),authException.getMessage());\n        }else if(authException instanceof InsufficientAuthenticationException){\n            result = R.errorResult(AppHttpCodeEnum.NEED_LOGIN);\n        }else{\n            result = R.errorResult(AppHttpCodeEnum.SYSTEM_ERROR.getCode(),"认证或授权失败");\n        }\n        //响应给前端\n        WebUtils.renderString(response, JSON.toJSONString(result));\n    }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Component\npublic class AccessDeniedHandlerImpl implements AccessDeniedHandler {\n    @Override\n    public void handle(HttpServletRequest request, HttpServletResponse response, AccessDeniedException e) throws IOException, ServletException {\n        e.printStackTrace();\n        R r = R.errorResult(AppHttpCodeEnum.NO_OPERATOR_AUTH);\n        WebUtils.renderString(response, JSON.toJSONString(r));\n    }\n}\n")])])]),n("p",[e._v("配置Security异常处理器")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    @Autowired\n    private AuthenticationEntryPoint authenticationEntryPoint;\n\n    @Autowired\n    private AccessDeniedHandler accessDeniedHandler;\n    \n    \n        //配置异常处理器\n        http.exceptionHandling()\n                .authenticationEntryPoint(authenticationEntryPoint)\n                .accessDeniedHandler(accessDeniedHandler);    \n    \n")])])]),n("h3",{attrs:{id:"_5-权限控制"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-权限控制"}},[e._v("#")]),e._v(" 5.权限控制")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//自定义权限校验方法\n@Service("ps")\npublic class PermissionService {\n\n    @Autowired\n    private RoleMapper roleMapper;\n\n    /**\n     * 判断当前用户是否具有权限\n     * @param permission\n     * @return\n     */\n    public boolean hasPermission(String permission) {\n        // 获取当前用户的权限列表\n        List<String> perms = roleMapper.selectRolesByUserId(SecurityUtils.getUserId());\n        return perms.contains(permission);\n    }\n}\n')])])]),n("p",[e._v("SecurityConfig")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@EnableGlobalMethodSecurity(prePostEnabled = true)\n")])])]),n("p",[e._v("注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    @GetMapping("/test")\n    @ApiOperation(value = "测试1")\n    @PreAuthorize("@ps.hasPermission(\'admin\')") ////////////\n    public String test(){\n        LambdaQueryWrapper<User> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(User::getUserName, "ry");\n        User user = userMapper.selectOne(queryWrapper);\n        System.out.println(user);\n//        List<String> keys = roleMapper.selectRolesByUserId(1L);\n//        System.out.println(keys);\n        return "123";\n    }\n')])])]),n("h3",{attrs:{id:"_6-登出"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-登出"}},[e._v("#")]),e._v(" 6.登出")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    @Override\n    public R logout() {\n        // 清除redis\n        Long userId = SecurityUtils.getUserId();\n        redisCache.deleteObject("login:"+userId);\n        return R.okResult();\n    }\n')])])]),n("p",[e._v("SecurityConfig")]),e._v(" "),n("p",[e._v("要关闭默认的退出登录功能。并且要配置我们的退出登录接口需要认证才能访问")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        //关闭默认的注销功能\n        http.logout().disable();\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('      .antMatchers("/logout").authenticated() //退出需要先登录\n')])])]),n("h2",{attrs:{id:"_6-完善其他功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-完善其他功能"}},[e._v("#")]),e._v(" 6.完善其他功能")])])}),[],!1,null,null,null);n.default=a.exports}}]);