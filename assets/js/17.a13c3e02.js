(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{289:function(e,a,t){"use strict";t.r(a);var s=t(13),n=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mybatis"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis"}},[e._v("#")]),e._v(" mybatis")]),e._v(" "),a("h2",{attrs:{id:"框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架"}},[e._v("#")]),e._v(" 框架")]),e._v(" "),a("h3",{attrs:{id:"常用结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用结构"}},[e._v("#")]),e._v(" 常用结构")]),e._v(" "),a("ol",[a("li",[e._v("三层架构\n"),a("ol",[a("li",[e._v("界面层\n"),a("ul",[a("li",[e._v("用来接收客户端的输入，调用业务逻辑层进行功能处理，返回结果给客户端。")])])]),e._v(" "),a("li",[e._v("业务逻辑层\n"),a("ul",[a("li",[e._v("业务处理，向上为界面层提供处理结果，向下问数据访问层要数据")])])]),e._v(" "),a("li",[e._v("数据访问层\n"),a("ul",[a("li",[e._v("进行数据库的增删改查，向上为业务逻辑层提供数据")])])])])]),e._v(" "),a("li",[e._v("为什么使用三层结构\n"),a("ol",[a("li",[e._v("结构清晰，耦合度低，各层分工明确")]),e._v(" "),a("li",[e._v("可维护性高，可扩展性高")]),e._v(" "),a("li",[e._v("有利于标准化")]),e._v(" "),a("li",[e._v("开发人员可以只关注于某一层功能实现")]),e._v(" "),a("li",[e._v("有利于各层逻辑的复用")])])]),e._v(" "),a("li",[e._v("常用的框架SSM\n"),a("ol",[a("li",[e._v("Spring:整合其他框架的框架，核心是IOC和AOP，由20个模块构成")]),e._v(" "),a("li",[e._v("SpringMVC：是Spring家族的一员，专门用来优化控制器（Servlet）")]),e._v(" "),a("li",[e._v("Mybatis：是持久化层的一个框架，进行数据库访问的优化")])])])]),e._v(" "),a("h2",{attrs:{id:"框架是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#框架是什么"}},[e._v("#")]),e._v(" 框架是什么")]),e._v(" "),a("ul",[a("li",[e._v("半成品软件，将所以公共的、重复的功能解决掉，高效开发。可复用、可扩展的。")])]),e._v(" "),a("h2",{attrs:{id:"mybatis框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis框架"}},[e._v("#")]),e._v(" Mybatis框架")]),e._v(" "),a("ul",[a("li",[e._v("apache的一个开源项目iBatis，改为Mybatis")]),e._v(" "),a("li",[e._v("完成数据访问层的优化，专注于sql语句，简化JDBC")])]),e._v(" "),a("h2",{attrs:{id:"mybatis框架-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis框架-2"}},[e._v("#")]),e._v(" Mybatis框架")]),e._v(" "),a("h3",{attrs:{id:"流程图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#流程图"}},[e._v("#")]),e._v(" 流程图")]),e._v(" "),a("ul",[a("li",[e._v("​\t"),a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220725131106433.png",alt:"image-20220725131106433"}})])]),e._v(" "),a("h3",{attrs:{id:"项目开发步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#项目开发步骤"}},[e._v("#")]),e._v(" 项目开发步骤")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("新建数据库表")])]),e._v(" "),a("li",[a("p",[e._v("新建maven项目，选quickstart模板")])]),e._v(" "),a("li",[a("p",[e._v("修改目录，添加缺少的目录")])]),e._v(" "),a("li",[a("p",[e._v("修改pom.xml文件，添加依赖")])]),e._v(" "),a("li",[a("p",[e._v("修改pom.xml文件，添加资源文件指定")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<resources>\n  <resource>\n    <directory>src/main/java</directory>\n    <includes>\n      <include>**/*.xml</include>\n      <include>**/*.properties</include>\n    </includes>\n  </resource>\n  <resource>\n    <directory>src/main/resources</directory>\n    <includes>\n      <include>**/*.xml</include>\n      <include>**/*.properties</include>\n    </includes>\n  </resource>\n</resources>\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("在idea中添加数据库可视化")])]),e._v(" "),a("li",[a("p",[e._v("添加jdbc.properties属性文件")])]),e._v(" "),a("li",[a("p",[e._v("添加SQLMapConfig.xml文件")])]),e._v(" "),a("li",[a("p",[e._v("创建实体类Student，封装数据")])]),e._v(" "),a("li",[a("p",[e._v("添加完成学生表增删改查功能的StudentMapper.xml文件")])]),e._v(" "),a("li",[a("p",[e._v("创建测试类，进行功能测试")])])]),e._v(" "),a("h3",{attrs:{id:"mybatis对象分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatis对象分析"}},[e._v("#")]),e._v(" Mybatis对象分析")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("Resources类：解析SqlMapConfig.xml文件")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('读取核心配置文件\nInputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("SqlSessionFactory接口：")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("DefaultSqlSessionFactory是SqlSessionFactory接口的实现类")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("创建SQLSessionFactory对象\nSqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);\n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("SqlSession接口")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('获取SqlSession对象\nSqlSession sqlSession = sqlSessionFactory.openSession();\n完成业务功能\nint num = sqlSession.update("zch.update", new Student(3, "hehe", "hehe@111.com", 18));\n提交业务\nsqlSession.commit();\n关闭\nsqlSession.close();\n')])])])])])])]),e._v(" "),a("h3",{attrs:{id:"优化测试类-teststuentmapper-java"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化测试类-teststuentmapper-java"}},[e._v("#")]),e._v(" 优化测试类:TestStuentMapper.java")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package xyz.zch1337.test;/*\n *作者：朱成浩zch1337\n *时间：2022/7/25\n */\n\nimport org.apache.ibatis.io.Resources;\nimport org.apache.ibatis.session.SqlSession;\nimport org.apache.ibatis.session.SqlSessionFactory;\nimport org.apache.ibatis.session.SqlSessionFactoryBuilder;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\nimport xyz.zch1337.pojo.Student;\n\nimport java.io.IOException;\nimport java.io.InputStream;\n\n/*\n *作者：朱成浩zch1337\n *时间：2022/7/25\n */\npublic class TestStuentMapper {\n    SqlSession sqlSession;  这个很重要呀\n    在所有函数执行之前执行\n    @Before\n    public void openSqlSession() throws IOException {\n        //使用文件流读取核心配置文件SqlMapConfig.xml\n        InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml");\n        //创建SqlSessionFactory工厂\n        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(in);\n        //取出sqlSession对象\n        sqlSession = factory.openSession();\n    }\n\t在所有函数执行之后执行\n    @After\n    public void  closeSqlSession() {\n        //关闭sqlSession对象\n        sqlSession.close();\n    }\n    @Test\n    public void testGetById() throws IOException {\n        //完成查询操作\n        Student student = sqlSession.selectOne("zch.getStudentById", 1);\n        System.out.println(student);\n    }\n    @Test\n    public void testGetByName() throws IOException {\n//        完成业务功能\n        Student student = sqlSession.selectOne("zch.getByName", "李");\n        System.out.println(student);\n    }\n\n    @Test\n    public void testInsert() throws IOException {\n//        完成业务功能\n        int num = sqlSession.insert("zch.insert", new Student("朱成浩", "18282200657@139.com", 20));\n//        切记 在增删改 后必须手工提交事务\n        sqlSession.commit();\n    }\n\n    @Test\n    public void testDelect() throws IOException {\n        int num = sqlSession.delete("zch.delect", 4);\n        System.out.println(num);\n//        切记 在增删改 后必须手工提交事务\n        sqlSession.commit();\n    }\n\n    @Test\n    public void testUpdate() throws IOException {\n//        完成业务功能\n        int num = sqlSession.update("zch.update", new Student(3, "hehe", "hehe@111.com", 18));\n        System.out.println(num);\n//        切记 在增删改 后必须手工提交事务\n        sqlSession.commit();\n    }\n\n}\n')])])])])]),e._v(" "),a("h3",{attrs:{id:"优化studentmapper-xml文件-为实体类注册别名"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优化studentmapper-xml文件-为实体类注册别名"}},[e._v("#")]),e._v(" 优化StudentMapper.xml文件(为实体类注册别名)")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在SqlMapConfig.xml文件中为实体类注册别名")]),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("注意顺序\nproperties之后，environments之前 \n")])])])])])]),e._v(" "),a("li",[a("p",[e._v("单个注册 这个不好")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<typeAliases>\n\t<typeAlias type="xyz.zch1337.pojo.Student" alias="student"></typeAlias>\n</typeAliases>\t\n')])])])]),e._v(" "),a("li",[a("p",[e._v("批量注册")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<typeAliases>\n    \x3c!--\n        批量注册\n        别名是类名的驼峰命名法\n        Student   -> student\n    --\x3e\n    <package name="xyz.zch1337.pojo"/>\n</typeAliases>\n')])])])])]),e._v(" "),a("h2",{attrs:{id:"设置日志输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置日志输出"}},[e._v("#")]),e._v(" 设置日志输出")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在SqlMapConfig.xml文件中设置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("注意顺序\nproperties之后，environments之前 \n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!--设置日志输出--\x3e\n    <settings>\n        <setting name="logImpl" value="STDOUT_LOGGING"/>\n    </settings>\n')])])])])]),e._v(" "),a("h2",{attrs:{id:"动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理"}},[e._v("#")]),e._v(" 动态代理")]),e._v(" "),a("h3",{attrs:{id:"为什么使用动态代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么使用动态代理"}},[e._v("#")]),e._v(" 为什么使用动态代理？")]),e._v(" "),a("ul",[a("li",[e._v("在三层架构中，业务逻辑层要通过接口访问数据访问层的功能，动态代理可以实现")]),e._v(" "),a("li",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220725142009922.png",alt:"image-20220725142009922"}})])]),e._v(" "),a("h3",{attrs:{id:"动态代理的实现规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理的实现规范"}},[e._v("#")]),e._v(" 动态代理的实现规范")]),e._v(" "),a("ul",[a("li",[e._v("UsersMapper.xml文件与UsersMapper.java的接口必须同一个目录下.")]),e._v(" "),a("li",[e._v("UsersMapper.xml文件与UsersMapper.java的接口的文件名必须一致,后缀不管.")]),e._v(" "),a("li",[e._v("UserMapper.xml文件中标签的id值与与UserMapper.java的接口中方法的名称完全一致.")]),e._v(" "),a("li",[e._v("UserMapper.xml文件中标签的parameterType属性值与与UserMapper.java的接口中方法的参数类型完全一致.")]),e._v(" "),a("li",[e._v("UserMapper.xml文件中标签的resultType值与与UserMapper.java的接口中方法的返回值类型完全一致.")]),e._v(" "),a("li",[e._v("UserMapper.xml文件中namespace属性必须是接口的完全限定名称com.bjpowernode.mapper.UsersMapper")]),e._v(" "),a("li",[e._v("在SqlMapConfig.xml文件中注册mapper文件时,使用class=接口的完全限定名称com.bjpowernode.mapper.UsersMapper.")])]),e._v(" "),a("h3",{attrs:{id:"动态代理访问的步骤"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态代理访问的步骤"}},[e._v("#")]),e._v(" 动态代理访问的步骤")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("建表")])]),e._v(" "),a("li",[a("p",[e._v("新建mavengongc")])]),e._v(" "),a("li",[a("p",[e._v("修改目录")])]),e._v(" "),a("li",[a("p",[e._v("修改pom.xml，添加依赖")])]),e._v(" "),a("li",[a("p",[e._v("修改pom.xml文件，添加资源文件指定")])]),e._v(" "),a("li",[a("p",[e._v("添加jdbc.properties属性文件")])]),e._v(" "),a("li",[a("p",[e._v("添加SqlMapConfig.xml文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE configuration\n        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-config.dtd">\n')])])])]),e._v(" "),a("li",[a("p",[e._v("创建实体类Student，封装数据")])]),e._v(" "),a("li",[a("p",[e._v("添加mapper文件夹，新建UsersMapper接口")])]),e._v(" "),a("li",[a("p",[e._v("在mapper文件夹下，新建UserMapper.xml文件，完成动态代理的规范。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<?xml version="1.0" encoding="UTF-8" ?>\n<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"\n        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">\n')])])])]),e._v(" "),a("li",[a("p",[e._v("创建测试类，进行功能测试")])])]),e._v(" "),a("h3",{attrs:{id:"mapper注册优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mapper注册优化"}},[e._v("#")]),e._v(" mapper注册优化")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<package name="xyz.zch1337.mapper"/>\n')])])]),a("h3",{attrs:{id:"和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和"}},[e._v("#")]),e._v(" #{}和${}")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("#{} 底层用PS对象，防止sql注册")])]),e._v(" "),a("li",[a("p",[e._v("${} 字符串拼接或字符串替换")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("拼接")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("一般用于模糊查询  where userName like '%${userName}%'")])]),e._v(" "),a("li",[a("p",[e._v("优化模糊查询")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("where userName like concat('%', #{name}, '%')")])])])])])]),e._v(" "),a("li",[a("p",[e._v("替换")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("需求：模糊地址或用户名查询")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("//模糊地址或用户名查询")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("List")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("Users")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("getByUserNameOrAddress")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Param")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"columnName"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" columnName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[e._v("@Param")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"columnValue"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("String")]),e._v(" columnValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\nxml文件中\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("select id"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"getByUserNameOrAddress"')]),e._v(" resultType"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"users"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n        select id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" birthday"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" sex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" address\n        from user\n        where $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("columnName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("  like "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token char"}},[e._v("'%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" #"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("columnValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token char"}},[e._v("'%'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("/")]),e._v("select"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n")])])])])])])])])]),e._v(" "),a("h3",{attrs:{id:"返回主键的值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#返回主键的值"}},[e._v("#")]),e._v(" 返回主键的值")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("在插入语句结束后，返回自增的主键值到入参的users对象的id属性中")]),e._v(" "),a("div",{staticClass:"language-xml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-xml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("insert")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("id")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("insert"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("parameterType")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("users"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),e._v("selectKey")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("keyProperty")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[e._v("resultType")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')]),e._v("int"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n            select last_insert_id()\n        "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("selectKey")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n        insert into user(username, birthday, sex, address)\n        values (#{userName}, #{birthday}, #{sex}, #{address})\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("</")]),e._v("insert")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v("\n")])])])]),e._v(" "),a("li",[a("p",[e._v("UUID的用法")]),e._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("void")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("testUUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("UUID")]),e._v(" uuid "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("UUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("randomUUID")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("uuid"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"-"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("substring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<selectKey keyProperty="orderid" order="BEFORE" resultType="string">\n            select uuid();\n</selectKey>\n\n')])])])])]),e._v(" "),a("h3",{attrs:{id:"动态sql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态sql"}},[e._v("#")]),e._v(" 动态sql")]),e._v(" "),a("p",[e._v("可以定义代码片段，可以进行逻辑判断，可以进行循环片段,使条件判断更为简单")]),e._v(" "),a("ol",[a("li",[a("p",[a("sql",[e._v(":定义代码片段")])],1)]),e._v(" "),a("li",[a("p",[a("include",[e._v(":引用")])],1),e._v(" "),a("ul",[a("li",[a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<sql id="allColumns">\n        id, username, birthday, sex, address\n</sql>\nselect <include refid="allColumns"></include>\n')])])])])])]),e._v(" "),a("li",[a("if")],1),e._v(" "),a("li",[a("p",[a("where",[e._v(":多条件拼接，在查询，删除，更新中用")])],1),e._v(" "),a("ul",[a("li",[a("p",[e._v("业务需求：按指定的条件进行多条件查询")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<select id="getByCondition" parameterType="users" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        <where>\n            <if test="userName != null and userName != \'\'"> //写传过来的值\n                and username like concat(\'%\', #{userName}, \'%\')\n            </if>\n            <if test="birthday != null">\n                and birthday = #{birthday}\n            </if>\n            <if test="sex != null and sex != \'\'">\n                and sex = #{sex}\n            </if>\n            <if test="address != null and address != \'\'">\n                and address like concat(\'%\', #{address}, \'%\')\n            </if>\n        </where>\n</select>\n')])])])])])]),e._v(" "),a("li",[a("p",[a("set",[e._v(":有选择的进行更新处理，至少更新一列")])],1),e._v(" "),a("ul",[a("li",[a("p",[e._v("业务需求:有选择的更新")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<update id="updateBySet" parameterType="users">\n        update user\n        <set>\n            <if test="userName != null and userName != \'\'">\n                username = #{userName},\n            </if>\n            <if test="birthday != null">\n                birthday = #{birthday},\n            </if>\n            <if test="sex != null and sex != \'\'">\n                sex = #{sex},\n            </if>\n            <if test="address != null and address != \'\'">\n                address = #{address},\n            </if>\n        </set>\n        where id = #{id}\n    </update>\n')])])])])])]),e._v(" "),a("li",[a("p",[a("foreach",[e._v(":用来循环遍历   id in（1,2,3)")])],1),e._v(" "),a("ul",[a("li",[a("p",[e._v("业务需求：查询多个指定id的用户信息")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<select id="getByIds" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where id in\n            <foreach collection="array" item="id" separator="," open="(" close=")">\n                #{id}\n            </foreach>\n</select>\n')])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("参数详解:\n    collection:表示接口中的方法参数的类型， 如果是数组使用array , 如果是list集合使用list\n    item:自定义的，表示数组和集合成员的变量\n    open:循环开始是的字符\n    close:循环结束时的字符\n    separator:集合成员之间的分隔符\n")])])])]),e._v(" "),a("li",[a("p",[e._v("批量删除用户")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<delete id="deleteBatch">\n        delete\n        from user\n        where id in\n            <foreach collection="array" item="id" separator="," open="(" close=")">\n                #{id}\n            </foreach>\n</delete>\n')])])])]),e._v(" "),a("li",[a("p",[e._v("批量更新用户")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<update id="updateBatch">\n        <foreach collection="list" item="users" separator=";">\n            update user\n            <set>\n                <if test="users.userName != null and users.userName != \'\'">\n                    username = #{users.userName},\n                </if>\n                <if test="users.birthday != null">\n                    birthday = #{users.birthday},\n                </if>\n                <if test="users.sex != null and users.sex != \'\'">\n                    sex = #{users.sex},\n                </if>\n                <if test="users.address != null and users.address != \'\'">\n                    address = #{users.address},\n                </if>\n            </set>\n            where id = #{users.id}\n        </foreach>\n</update>\n\n注意注意：\n批量更新要在url中添加参数：&allowMultiQueries=true\n允许多条语句同时执行\n')])])])]),e._v(" "),a("li",[a("p",[e._v("批量添加")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\x3c!--  int insertActivityByList(List<Activity> activityList);--\x3e\n  <insert id="insertActivityByList">\n    insert into tbl_activity(id, owner, name, start_date, end_date, cost, description, create_time, create_by)\n    values\n    <foreach collection="list" item="obj" separator=",">\n      (#{obj.id}, #{obj.owner}, #{obj.name}, #{obj.startDate}, #{obj.endDate}, #{obj.cost}, #{obj.description},\n      #{obj.createTime}, #{obj.createBy})\n    </foreach>\n  </insert>\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("指定参数位置")]),e._v(" "),a("p",[e._v("如果入参是多个，可以通过指定参数进行传参，是实体包含不住的条件，如果某个成员变量要有区间范围内的判断，或者有俩个值进行处理，实体类实现不了")]),e._v(" "),a("p",[e._v("eg：查询指定日期范围内的用户")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('<select id="getByBirhday" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where birthday between #{arg0} and #{arg1}\n</select>\narg0 arg1是传入参数的下标\n')])])])]),e._v(" "),a("li",[a("p",[e._v("入参是map(重点)")]),e._v(" "),a("p",[e._v("如果入参超过一个以上，使用map封装查询条件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v(' #{birthdayBegin}  是map中的key\n\n<select id="getByMap" resultType="users">\n        select <include refid="allColumns"></include>\n        from user\n        where birthday between #{birthdayBegin} and #{birthdayEnd}\n</select>\n\n测试\n@Test\n    public void testGetByMap() throws ParseException {\n        Date begin = sf.parse("1999-02-22");\n        Date end = sf.parse("2001-03-10");\n        Map map = new HashMap<>();\n        map.put("birthdayBegin", begin);\n        map.put("birthdayEnd", end);\n        List<Users> usersList = usersMapper.getByMap(map);\n        usersList.forEach(users -> System.out.println(users));\n    }\n')])])])]),e._v(" "),a("li",[a("p",[e._v("返回值是一行的map")]),e._v(" "),a("p",[e._v("多表查询时，无法用一个实体类封装数据")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//返回值是一行map\nMap getReturnMap(Integer id);\n\n<select id="getReturnMap" parameterType="int" resultType="map">\n        select username, address\n        from user\n        where id = #{id}\n</select>\n\n测试\n\t@Test\n    public void testGetReturnMap() {\n        Map map = usersMapper.getReturnMap(18);\n        System.out.println(map.get("username"));\n        System.out.println(map.get("address"));\n    }\n结果\n{address=四川, username=朱成浩2}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("返回值是多行的map")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('//返回多行的map\nList<Map> getMulMap();\n<select id="getMulMap" resultType="map">\n        select username, address\n        from user\n</select>\n测试\n\t@Test\n    public void testGetMulMap() {\n        List<Map> mapList = usersMapper.getMulMap();\n        mapList.forEach(map -> {\n            System.out.println(map);\n        });\n    }\n')])])])]),e._v(" "),a("li",[a("p",[e._v("解决实体类与数据库列名不一致问题")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("方法1:别名")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('\t<select id="getBooksMap" resultType="map">\n        select bookid id, bookname name\n        from book\n    </select>\n')])])])]),e._v(" "),a("li",[a("p",[e._v("方法二:resultMap映射")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    <resultMap id="bookmap" type="map">\n        <id property="id" column="bookid"></id>\n        <result property="name" column="bookname"></result>\n    </resultMap>\n    <select id="getBooksMap2" resultMap="bookmap">\n        select bookid, bookname\n        from book\n    </select>\n')])])])])])]),e._v(" "),a("li",[a("p",[e._v("多表查询")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("一对多")]),e._v(" "),a("p",[e._v("客户对订单就是一对多")]),e._v(" "),a("p",[e._v("业务需求：查询客户信息并查询名下所有订单 站在查询客户角度")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Customer实体类的成员\n    private Integer id;\n    private String name;\n    private Integer age;\n    private List<Orders> ordersList;\nCustomerMapper.xml中配置\n    <resultMap id="customermap" type="customer">\n        <id property="id" column="cid"></id>\n        <result property="name" column="name"></result>\n        <result property="age" column="age"></result>\n        <collection property="ordersList" ofType="orders">\n            <id property="id" column="oid"></id>\n            <result property="orderNumber" column="orderNumber"></result>\n            <result property="orderPrice" column="orderPrice"></result>\n            <result property="customer_id" column="customer_id"></result>\n        </collection>\n    </resultMap>\n    <select id="getById" parameterType="int" resultMap="customermap">\n        select c.id cid, name, age, o.id oid, orderNumber, orderPrice, customer_id\n        from customer c left join orders o on c.id = o.customer_id\n        where c.id = #{id}\n    </select>\n')])])])]),e._v(" "),a("li",[a("p",[e._v("多对一")]),e._v(" "),a("p",[e._v("订单对客户就是多对一")]),e._v(" "),a("p",[e._v("业务需求：查询某个订单并查询对应的客户信息 站在查询某个订单角度")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('    <resultMap id="ordersmap" type="orders">\n        <id property="id" column="oid"></id>\n        <result property="orderNumber" column="orderNumber"></result>\n        <result property="orderPrice" column="orderPrice"></result>\n        <result property="customer_id" column="customer_id"></result>\n        <association property="customer" javaType="customer">\n            <id property="id" column="cid"></id>\n            <result property="name" column="name"></result>\n            <result property="age" column="age"></result>\n        </association>\n    </resultMap>\n    <select id="getById" parameterType="int" resultMap="ordersmap">\n        select o.id oid, orderNumber, orderPrice, customer_id, c.id cid, name, age\n        from orders o inner join customer c on o.customer_id = c.id\n        where o.id = #{id}\n    </select>\n    注意：\n    <association property="customer" javaType="customer"\n')])])])]),e._v(" "),a("li",[a("p",[e._v("多对多")])]),e._v(" "),a("li",[a("p",[e._v("总结")]),e._v(" "),a("p",[e._v("无论是什么关联关系，如果某方持有另一方的集合，使用"),a("collection",[e._v("标签完成映射，如果某方持有另一方的对象，使用"),a("association",[e._v("标签完成映射")])],1)],1),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220728210141351.png",alt:"image-20220728210141351"}})])])])])]),e._v(" "),a("p",[e._v("​")]),e._v(" "),a("h3",{attrs:{id:"事务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[e._v("#")]),e._v(" 事务")]),e._v(" "),a("ul",[a("li",[a("p",[e._v("设置事务:在SqlMapConfig.xml文件中"),a("transactionManager",{attrs:{type:"JDBC"}})],1)]),e._v(" "),a("li",[a("p",[e._v("提交事务:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("sqlSession = sqlSessionFactory.openSession();\n默认为 false，手动提交事务  sqlSession.commit();\ntrue 为自动提交\n")])])])])]),e._v(" "),a("h3",{attrs:{id:"缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[e._v("#")]),e._v(" 缓存")]),e._v(" "),a("p",[e._v("Mybatis提供缓存，一级缓存和二级缓存，默认开启一级缓存。目的是提高查询效率。")]),e._v(" "),a("p",[e._v("使用缓存后，查询的流程:")]),e._v(" "),a("p",[e._v("查询时先到缓存里查，如果没有则查询数据库，放缓存一份，在返回客户端，下次查询时直接从缓存中返回。如果数据库发生改变(commit操作)，则清空缓存。")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20220730111424401.png",alt:"image-20220730111424401"}})]),e._v(" "),a("ul",[a("li",[e._v("一级缓存使用的是SqlSession的作用域，同一个sqlSession共享一级缓存的数据。")]),e._v(" "),a("li",[e._v("二级缓存使用的是mapper的作用域，不同的sqlSession只要访问同一个mapper.xml文件，则共享二级缓存作用域。")])]),e._v(" "),a("h3",{attrs:{id:"orm和持久化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#orm和持久化"}},[e._v("#")]),e._v(" ORM和持久化")]),e._v(" "),a("p",[e._v("什么是ORM？")]),e._v(" "),a("p",[e._v("Object Relation Mapping：对象关系映射")]),e._v(" "),a("p",[e._v("java语言中以对象的方式操作数据，存在数据库中是以表的方式进行存储，对象中的成员变量与表中的列之间的数据互换称为映射，整套操作就是ORM")]),e._v(" "),a("p",[e._v("什么是持久化的操作？")]),e._v(" "),a("p",[e._v("java内存的数据对象形式存到关系数据库的表中，将数据库的数据读取出来以封装，数据的来来回回就是持久化的操作。")]),e._v(" "),a("h1",{attrs:{id:"mybatisplus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mybatisplus"}},[e._v("#")]),e._v(" mybatisPLUS")]),e._v(" "),a("h2",{attrs:{id:"_0-启动类中添加-mapperscan-注解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-启动类中添加-mapperscan-注解"}},[e._v("#")]),e._v(" 0.启动类中添加 "),a("code",[e._v("@MapperScan")]),e._v(" 注解")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122200224110.png",alt:"image-20221122200224110"}})]),e._v(" "),a("h2",{attrs:{id:"_1-添加依赖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加依赖"}},[e._v("#")]),e._v(" 1.添加依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n            <version>3.4.1</version>\n        </dependency>\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n            <version>8.0.23</version>\n        </dependency>\n\n")])])]),a("h2",{attrs:{id:"_2-配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-配置文件"}},[e._v("#")]),e._v(" 2.配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("mybatis-plus:\n  configuration:\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl # 查看日志\nspring:\n  datasource:\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    url: jdbc:mysql://localhost:3306/guigu-auth?characterEncoding=utf-8&useSSL=false\n    username: root\n    password: zch123456\n")])])]),a("h2",{attrs:{id:"_3-实体类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-实体类"}},[e._v("#")]),e._v(" 3.实体类")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('1.BaseEntity\npackage xyz.zch1337.demo01.model.base;\n\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableLogic;\nimport lombok.Data;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Data\npublic class BaseEntity implements Serializable {\n\n    //@TableId(type = IdType.AUTO)\n    private String id;\n\n    @TableField("create_time")\n    private Date createTime;\n\n    @TableField("update_time")\n    private Date updateTime;\n\n    @TableLogic  //逻辑删除 默认效果 0 没有删除 1 已经删除\n    @TableField("is_deleted")\n    private Integer isDeleted;\n\n    @TableField(exist = false)\n    private Map<String,Object> param = new HashMap<>();\n}\n\n')])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122195146690.png",alt:"image-20221122195146690"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('2.SysRole类继承base类\npackage xyz.zch1337.demo01.model.system;\n\nimport com.baomidou.mybatisplus.annotation.TableField;\nimport com.baomidou.mybatisplus.annotation.TableName;\nimport lombok.Data;\nimport xyz.zch1337.demo01.model.base.BaseEntity;\n@Data\n@TableName("sys_role")\npublic class SysRole extends BaseEntity {\n\n\tprivate static final long serialVersionUID = 1L;\n\n\t@TableField("role_name")\n\tprivate String roleName;\n\n\t@TableField("role_code")\n\tprivate String roleCode;\n\n\t@TableField("description")\n\tprivate String description;\n\n}\n')])])]),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122195201349.png",alt:"image-20221122195201349"}})]),e._v(" "),a("h2",{attrs:{id:"_4-添加mapper接口-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-添加mapper接口-继承"}},[e._v("#")]),e._v(" 4.添加Mapper接口 继承")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122195419697.png",alt:"image-20221122195419697"}})]),e._v(" "),a("h2",{attrs:{id:"_5-测试mapper接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-测试mapper接口"}},[e._v("#")]),e._v(" 5.测试Mapper接口")]),e._v(" "),a("p",[e._v("使用条件构造器")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122200302698.png",alt:"image-20221122200302698"}})]),e._v(" "),a("h2",{attrs:{id:"_6-封装的service层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-封装的service层"}},[e._v("#")]),e._v(" 6.封装的service层")]),e._v(" "),a("h3",{attrs:{id:"_1-添加接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-添加接口"}},[e._v("#")]),e._v(" 1.添加接口")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122200758393.png",alt:"image-20221122200758393"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("public interface SysRoleService extends IService<SysRole> {\n}\n")])])]),a("h3",{attrs:{id:"_2-添加接口实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-添加接口实现"}},[e._v("#")]),e._v(" 2.添加接口实现")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122200904931.png",alt:"image-20221122200904931"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@Transactional\n@Service\npublic class SysRoleServiceImpl extends ServiceImpl<SysRoleMapper, SysRole> implements SysRoleService {\n}\n")])])]),a("h3",{attrs:{id:"_3-测试接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-测试接口"}},[e._v("#")]),e._v(" 3.测试接口")]),e._v(" "),a("p",[a("img",{attrs:{src:"C:%5CUsers%5CZhuChengHao%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221122202206281.png",alt:"image-20221122202206281"}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",[a("code",[e._v('@Autowired\nprivate SysRoleService sysRoleService;\n@Test\nvoid test() {\n    //使用条件构造器\n    LambdaQueryWrapper<SysRole> queryWrapper = new LambdaQueryWrapper<>();\n    queryWrapper.eq(SysRole::getRoleName,"系统管理员");\n    List<SysRole> list = sysRoleService.list(queryWrapper);\n    System.out.println(list);\n}\n')])])])])}),[],!1,null,null,null);a.default=n.exports}}]);