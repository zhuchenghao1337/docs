(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{297:function(e,n,t){"use strict";t.r(n);var a=t(13),r=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"_1-模块化搭建项目"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-模块化搭建项目"}},[e._v("#")]),e._v(" 1.模块化搭建项目")]),e._v(" "),n("h2",{attrs:{id:"_2-swagger和集成knife4j"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-swagger和集成knife4j"}},[e._v("#")]),e._v(" 2.Swagger和集成knife4j")]),e._v(" "),n("h3",{attrs:{id:"_2-1依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-1依赖"}},[e._v("#")]),e._v(" 2.1依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("<dependency>\n    <groupId>com.github.xiaoymin</groupId>\n    <artifactId>knife4j-spring-boot-starter</artifactId>\n</dependency>\n注意 这个依赖容易和其他的依赖冲突，导致加载不了注解\n解决办法：把相关的依赖删掉\n")])])]),n("h3",{attrs:{id:"_2-2添加knife4j配置类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-2添加knife4j配置类"}},[e._v("#")]),e._v(" 2.2添加knife4j配置类")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport springfox.documentation.builders.ApiInfoBuilder;\nimport springfox.documentation.builders.ParameterBuilder;\nimport springfox.documentation.builders.PathSelectors;\nimport springfox.documentation.builders.RequestHandlerSelectors;\nimport springfox.documentation.schema.ModelRef;\nimport springfox.documentation.service.ApiInfo;\nimport springfox.documentation.service.Contact;\nimport springfox.documentation.service.Parameter;\nimport springfox.documentation.spi.DocumentationType;\nimport springfox.documentation.spring.web.plugins.Docket;\nimport springfox.documentation.swagger2.annotations.EnableSwagger2WebMvc;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\n/**\n * knife4j配置信息\n */\n@Configuration\n@EnableSwagger2WebMvc\npublic class Knife4jConfig {\n\n    @Bean\n    public Docket adminApiConfig(){\n        List<Parameter> pars = new ArrayList<>();\n        ParameterBuilder tokenPar = new ParameterBuilder();\n        tokenPar.name("token")\n                .description("用户token")\n                .defaultValue("")\n                .modelRef(new ModelRef("string"))\n                .parameterType("header")\n                .required(false)\n                .build();\n        pars.add(tokenPar.build());\n        //添加head参数end\n\n        Docket adminApi = new Docket(DocumentationType.SWAGGER_2)\n                .groupName("adminApi")\n                .apiInfo(adminApiInfo())\n                .select()\n                //只显示admin路径下的页面 \n                .apis(RequestHandlerSelectors.basePackage("com.atguigu"))\n                .paths(PathSelectors.regex("/admin/.*"))\n                .build()\n                .globalOperationParameters(pars);\n        return adminApi;\n    }\n\n    private ApiInfo adminApiInfo(){\n\n        return new ApiInfoBuilder()\n                .title("后台管理系统-API文档")\n                .description("本文档描述了后台管理系统微服务接口定义")\n                .version("1.0")\n                .contact(new Contact("atguigu", "http://atguigu.com", "atguigu@qq.com"))\n                .build();\n    }\n\n\n}\n')])])]),n("h3",{attrs:{id:"_2-3controller层添加注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-3controller层添加注解"}},[e._v("#")]),e._v(" 2.3Controller层添加注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//在类上面添加 @Api(tags = "egs")\n@Api(tags = "角色管理")\n\n@RestController\n@RequestMapping("/admin/system/sysRole")\npublic class SysRoleController {\n@Autowired\nprivate SysRoleService sysRoleService;\n//在方法上面添加 @ApiOperation(value = "获取全部角色列表")\n@ApiOperation(value = "获取全部角色列表")\n@GetMapping("findAll")\npublic Result<List<SysRole>> findAll() {\n    List<SysRole> roleList = sysRoleService.list();\n    return Result.ok(roleList);\n}\n')])])]),n("h3",{attrs:{id:"_2-4测试"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-4测试"}},[e._v("#")]),e._v(" 2.4测试")]),e._v(" "),n("p",[e._v("http://localhost:8800/doc.html")]),e._v(" "),n("h2",{attrs:{id:"_3-前后端交换数据"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-前后端交换数据"}},[e._v("#")]),e._v(" 3.前后端交换数据")]),e._v(" "),n("h3",{attrs:{id:"_3-1响应格式封装vo类-1"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-1响应格式封装vo类-1"}},[e._v("#")]),e._v(" 3.1响应格式封装Vo类-(1)")]),e._v(" "),n("p",[e._v("Vo类是一个实体类")]),e._v(" "),n("p",[e._v("可以前端给后端传 使用vo类来接收--方便封装数据")]),e._v(" "),n("p",[e._v("可以后端给前端返回 使用vo类封装--方便返回特定的数据")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.Date;\n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class ArticleDetailVo {\n    private Long id;\n    //文章摘要\n    private String summary;\n    //所属分类id\n    private Long categoryId;\n    //所属分类名\n    private String categoryName;\n    //缩略图\n    private String thumbnail;\n    //文章内容\n    private String content;\n    //访问量\n    private Long viewCount;\n    //发布时间\n    private Date createTime;\n}\n")])])]),n("h3",{attrs:{id:"_3-2json统一交换格式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-2json统一交换格式"}},[e._v("#")]),e._v(" 3.2JSON统一交换格式")]),e._v(" "),n("p",[e._v("比如后端需要这么一个数据 [1,2,3]")]),e._v(" "),n("p",[e._v("前端就传这个数据 后端 使用List<Integer>来接")]),e._v(" "),n("p",[e._v("后端\t前端")]),e._v(" "),n("p",[e._v("对象\tJSON对象")]),e._v(" "),n("p",[e._v("数组    []")]),e._v(" "),n("p",[e._v("...等等 是相互对应的")]),e._v(" "),n("h3",{attrs:{id:"_3-3-url传参"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-url传参"}},[e._v("#")]),e._v(" 3.3 URL传参")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 地址栏传参\n@ApiOperation("根据id查询")\n@PostMapping("findRoleById/{id}")\npublic Result findRoleById(@PathVariable("id") Long id) { // 使用@PathVariable（"id"）来接收\n    SysRole sysRole = sysRoleService.getById(id);\n    return Result.ok(sysRole);\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@ApiOperation("条件分页查询")\n@GetMapping("{page}/{limit}")\npublic Result findPageQueryRole(@PathVariable Long page,\n                                @PathVariable Long limit, SysRoleQueryVo sysRoleQueryVo) {\n    //从地址栏上拿数据 封装到VO类中\n    //创建page对象\n    Page<SysRole> pageParam = new Page<>(page, limit);\n    //调用service方法\n    IPage<SysRole> pageModel = sysRoleService.selectPage(pageParam, sysRoleQueryVo);\n    return Result.ok(pageModel);\n}\n')])])]),n("h3",{attrs:{id:"_3-4-deletemapping接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-deletemapping接口"}},[e._v("#")]),e._v(" 3.4@DeleteMapping接口")]),e._v(" "),n("p",[e._v("数据是放到请求体中的 后端用@RequestBody来拿")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@ApiOperation("批量逻辑删除")\n@DeleteMapping("batchRemove")\npublic Result batchRemoveRoles(@RequestBody List<Long> ids) {\n    //获取多个id值\n    //1. [1,2,3]  配合@RequestBody List<Long> ids  json中的数据\n    //前后端 对象和json对应的    双向的\n    sysRoleService.removeByIds(ids);\n    return Result.ok();\n}\n')])])]),n("h3",{attrs:{id:"_3-5响应格式封装r-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-5响应格式封装r-2"}},[e._v("#")]),e._v(" 3.5响应格式封装R-(2)")]),e._v(" "),n("p",[e._v("R.java")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("注意 用了jackson依赖\nimport com.fasterxml.jackson.annotation.JsonInclude;\nimport xyz.zch1337.domain.enums.AppHttpCodeEnum;\n\nimport java.io.Serializable;\n\n@JsonInclude(JsonInclude.Include.NON_NULL)\npublic class R<T> implements Serializable {\n    private Integer code;\n    private String msg;\n    private T data;\n\n    public R() {\n        this.code = AppHttpCodeEnum.SUCCESS.getCode();\n        this.msg = AppHttpCodeEnum.SUCCESS.getMsg();\n    }\n\n    public R(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n    }\n\n    public R(Integer code, String msg, T data) {\n        this.code = code;\n        this.msg = msg;\n        this.data = data;\n    }\n\n    public R(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n    }\n\n    public static R errorResult(int code, String msg) {\n        R result = new R();\n        return result.error(code, msg);\n    }\n    public static R okResult() {\n        R result = new R();\n        return result;\n    }\n    public static R okResult(int code, String msg) {\n        R result = new R();\n        return result.ok(code, null, msg);\n    }\n\n    public static R okResult(Object data) {\n        R result = setAppHttpCodeEnum(AppHttpCodeEnum.SUCCESS, AppHttpCodeEnum.SUCCESS.getMsg());\n        if(data!=null) {\n            result.setData(data);\n        }\n        return result;\n    }\n\n    public static R errorResult(AppHttpCodeEnum enums){\n        return setAppHttpCodeEnum(enums,enums.getMsg());\n    }\n\n    public static R errorResult(AppHttpCodeEnum enums, String msg){\n        return setAppHttpCodeEnum(enums,msg);\n    }\n\n    public static R setAppHttpCodeEnum(AppHttpCodeEnum enums){\n        return okResult(enums.getCode(),enums.getMsg());\n    }\n\n    private static R setAppHttpCodeEnum(AppHttpCodeEnum enums, String msg){\n        return okResult(enums.getCode(),msg);\n    }\n\n    public R<?> error(Integer code, String msg) {\n        this.code = code;\n        this.msg = msg;\n        return this;\n    }\n\n    public R<?> ok(Integer code, T data) {\n        this.code = code;\n        this.data = data;\n        return this;\n    }\n\n    public R<?> ok(Integer code, T data, String msg) {\n        this.code = code;\n        this.data = data;\n        this.msg = msg;\n        return this;\n    }\n\n    public R<?> ok(T data) {\n        this.data = data;\n        return this;\n    }\n\n    public Integer getCode() {\n        return code;\n    }\n\n    public void setCode(Integer code) {\n        this.code = code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n\n    public void setMsg(String msg) {\n        this.msg = msg;\n    }\n\n    public T getData() {\n        return data;\n    }\n\n    public void setData(T data) {\n        this.data = data;\n    }\n    \n}\n")])])]),n("p",[e._v("枚举类AppHttpCodeEnum.java")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('public enum AppHttpCodeEnum {\n    // 成功\n    SUCCESS(200,"操作成功"),\n    // 登录\n    NEED_LOGIN(401,"需要登录后操作"),\n    NO_OPERATOR_AUTH(403,"无权限操作"),\n    SYSTEM_ERROR(500,"出现错误"),\n    USERNAME_EXIST(501,"用户名已存在"),\n    PHONENUMBER_EXIST(502,"手机号已存在"), EMAIL_EXIST(503, "邮箱已存在"),\n    REQUIRE_USERNAME(504, "必需填写用户名"),\n    LOGIN_ERROR(505,"用户名或密码错误");\n    int code;\n    String msg;\n\n    AppHttpCodeEnum(int code, String errorMessage){\n        this.code = code;\n        this.msg = errorMessage;\n    }\n\n    public int getCode() {\n        return code;\n    }\n\n    public String getMsg() {\n        return msg;\n    }\n}\n')])])]),n("h3",{attrs:{id:"_3-6处理日期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-6处理日期"}},[e._v("#")]),e._v(" 3.6处理日期")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('添加配置转换器\n\nWebConfig\n\n\nimport com.alibaba.fastjson.serializer.SerializeConfig;\nimport com.alibaba.fastjson.serializer.SerializerFeature;\nimport com.alibaba.fastjson.serializer.ToStringSerializer;\nimport com.alibaba.fastjson.support.config.FastJsonConfig;\nimport com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.http.converter.HttpMessageConverter;\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\nimport java.util.List;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    // 开启跨域访问\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // 设置允许跨域的路径\n        registry.addMapping("/**")\n                // 设置允许跨域请求的域名\n                .allowedOriginPatterns("*")\n                // 是否允许cookie\n                .allowCredentials(true)\n                // 设置允许的请求方式\n                .allowedMethods("GET", "POST", "DELETE", "PUT")\n                // 设置允许的header属性\n                .allowedHeaders("*")\n                // 跨域允许时间\n                .maxAge(3600);\n    }\n\n    // 配置转换器\n    @Override\n    public void configureMessageConverters(List<HttpMessageConverter<?>> converters) {\n        converters.add(fastJsonHttpMessageConverters());\n    }\n    // 转换日期格式\n    @Bean//使用@Bean注入fastJsonHttpMessageConvert\n    public HttpMessageConverter fastJsonHttpMessageConverters() {\n        //1.需要定义一个Convert转换消息的对象\n        FastJsonHttpMessageConverter fastConverter = new FastJsonHttpMessageConverter();\n        FastJsonConfig fastJsonConfig = new FastJsonConfig();\n        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);\n        fastJsonConfig.setDateFormat("yyyy-MM-dd HH:mm:ss");\n\n        SerializeConfig.globalInstance.put(Long.class, ToStringSerializer.instance);\n\n        fastJsonConfig.setSerializeConfig(SerializeConfig.globalInstance);\n        fastConverter.setFastJsonConfig(fastJsonConfig);\n        HttpMessageConverter<?> converter = fastConverter;\n        return converter;\n    }\n    \n}\n')])])]),n("h2",{attrs:{id:"_4-前端的一些知识"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-前端的一些知识"}},[e._v("#")]),e._v(" 4.前端的一些知识")]),e._v(" "),n("h3",{attrs:{id:"_4-1js模块化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-1js模块化"}},[e._v("#")]),e._v(" 4.1JS模块化")]),e._v(" "),n("h4",{attrs:{id:"es5"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es5"}},[e._v("#")]),e._v(" ES5")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("01.js\n// 定义成员：\nconst sum = function(a,b){\n    return parseInt(a) + parseInt(b)\n}\nconst subtract = function(a,b){\n    return parseInt(a) - parseInt(b)\n}\n\n// 导出成员：\n//简写\nmodule.exports = {\n    sum,\n    subtract\n}\n\nES5用法\n//引入模块，注意：当前路径必须写 ./\nconst m = require('./四则运算.js')\n")])])]),n("h4",{attrs:{id:"es6"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#es6"}},[e._v("#")]),e._v(" ES6")]),e._v(" "),n("p",[e._v("底层是先转5再运行")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("写法1\nexport function getList() {\n    console.log('获取数据列表')\n}\nexport function save() {\n    console.log('保存数据')\n}\nES6用法\nimport { getList, save } from \"./userApi.js\"\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("写法2\nexport default {\n    getList() {\n        console.log('获取数据列表2')\n    },\n    save() {\n        console.log('保存数据2')\n    }\n}\n\n\nimport user from \"./userApi2.js\"\n")])])]),n("h3",{attrs:{id:"_4-2使用框架搭建环境"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-2使用框架搭建环境"}},[e._v("#")]),e._v(" 4.2使用框架搭建环境")]),e._v(" "),n("p",[e._v("vue-element-admin")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("npm install\nnpm run dev\n")])])]),n("h2",{attrs:{id:"_5-mybatisplus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-mybatisplus"}},[e._v("#")]),e._v(" 5.MybatisPlus")]),e._v(" "),n("h3",{attrs:{id:"_5-1配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-1配置"}},[e._v("#")]),e._v(" 5.1配置")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1.依赖\n        \x3c!--mybatisPlus依赖--\x3e\n        <dependency>\n            <groupId>com.baomidou</groupId>\n            <artifactId>mybatis-plus-boot-starter</artifactId>\n        </dependency>\n        \x3c!--mysql数据库驱动--\x3e\n        <dependency>\n            <groupId>mysql</groupId>\n            <artifactId>mysql-connector-java</artifactId>\n        </dependency>\n2.yml文件配置\nspring:\n  datasource:\n    url: jdbc:mysql://124.222.237.176:3306/zch_blog?characterEncoding=utf-8&serverTimezone=Asia/Shanghai\n    username: root\n    password: 123456\n    driver-class-name: com.mysql.cj.jdbc.Driver\n  servlet:\n    multipart:\n      max-file-size: 2MB\n      max-request-size: 5MB\nmybatis-plus:\n  configuration:\n    # 日志\n    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl\n  global-config:\n    db-config:\n      logic-delete-field: delFlag\n      logic-delete-value: 1\n      logic-not-delete-value: 0\n      id-type: auto\n3.idea连接数据库\n4.easycode模板\n     注意 删除前缀\n")])])]),n("p",[e._v("entity")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##保存文件（宏定义）\n#save("/entity", ".java")\n\n##包路径（宏定义）\n#setPackageSuffix("entity")\n\n##自动导入包（全局变量）\n$!{autoImport.vm}\n\nimport java.io.Serializable;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\nimport com.baomidou.mybatisplus.annotation.TableId;\nimport com.baomidou.mybatisplus.annotation.TableName;\n##表注释（宏定义）\n#tableComment("表实体类")\n@SuppressWarnings("serial")\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@TableName("$!{tableInfo.obj.name}")\npublic class $!{tableInfo.name}  {\n#foreach($column in $tableInfo.pkColumn)\n    #if(${column.comment})//${column.comment}#end\n@TableId\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.otherColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n}\n')])])]),n("p",[e._v("mapper")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("Mapper")\n\n##保存文件（宏定义）\n#save("/mapper", "Mapper.java")\n\n##包路径（宏定义）\n#setPackageSuffix("mapper")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment("表数据库访问层")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n}\n\n')])])]),n("p",[e._v("service")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("Service")\n\n##保存文件（宏定义）\n#save("/service", "Service.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##表注释（宏定义）\n#tableComment("表服务接口")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n\n}\n\n')])])]),n("p",[e._v("serviceImpl")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('##导入宏定义\n$!{define.vm}\n\n##设置表后缀（宏定义）\n#setTableSuffix("ServiceImpl")\n\n##保存文件（宏定义）\n#save("/service/impl", "ServiceImpl.java")\n\n##包路径（宏定义）\n#setPackageSuffix("service.impl")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.mapper.$!{tableInfo.name}Mapper;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##表注释（宏定义）\n#tableComment("表服务实现类")\n@Service\n##@Service("$!tool.firstLowerCase($tableInfo.name)Service")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Mapper, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n\n}\n\n')])])]),n("h3",{attrs:{id:"_5-2使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-2使用"}},[e._v("#")]),e._v(" 5.2使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("1.基本使用\n在serviceImpl中\n直接使用方法，不需要注入mapper了\n使用其他service 需要注入\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        LambdaQueryWrapper<Link> queryWrapper = new LambdaQueryWrapper<>();\n        queryWrapper.eq(Link::getStatus, SystemConstants.LINK_STATUS_NORMAL);\n        List<Link> list = list(queryWrapper);\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("2.进阶使用 动态sql\n\t1.判断 值是否为空 不为空就加入条件\n    // 如果有categoryId 加入条件\n    queryWrapper.eq(Objects.nonNull(categoryId) && categoryId > 0, Article::getCategoryId, categoryId);\t\n    2.排序功能\n    // 实现文章置顶功能 对isTop进行降序\n    queryWrapper.orderByDesc(Article::getIsTop)\n\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("3.分页查询\n\t//创建page对象\n\tPage<Article> page = new Page<>(pageNum, pageSize);\n\t//带条件分页查询\n\tpage(page, queryWrapper);\n\t//拿到分页的结果\n\tList<Article> articles = page.getRecords();\n注意：\t需要添加分页拦截器\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("MbatisPlusConfig\n\n@Configuration\npublic class MbatisPlusConfig {\n\n    /**\n     * 3.4.0之后版本\n     * mybatis 分页拦截器\n     * @return\n     */\n    @Bean\n    public MybatisPlusInterceptor mybatisPlusInterceptor(){\n        MybatisPlusInterceptor mybatisPlusInterceptor = new MybatisPlusInterceptor();\n        mybatisPlusInterceptor.addInnerInterceptor(new PaginationInnerInterceptor());\n        return mybatisPlusInterceptor;\n    }\n}\n")])])]),n("h2",{attrs:{id:"_6-字面量封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-字面量封装"}},[e._v("#")]),e._v(" 6.字面量封装")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('SystemConstants\n\npublic class SystemConstants\n{\n    /**\n     *  文章是草稿\n     */\n    public static final int ARTICLE_STATUS_DRAFT = 1;\n    /**\n     *  文章是正常发布状态\n     */\n    public static final int ARTICLE_STATUS_NORMAL = 0;\n\n    public static final String STATUS_NORMAL = "0";\n\n    /**\n     *  友链审核通过是正常状态\n     */\n    public static final String LINK_STATUS_NORMAL = "0";\n}\n\n')])])]),n("h2",{attrs:{id:"_7-博客表浏览量-并发优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-博客表浏览量-并发优化"}},[e._v("#")]),e._v(" 7.博客表浏览量 并发优化")]),e._v(" "),n("p",[e._v("使用redis，来优化")]),e._v(" "),n("p",[e._v("1.程序初始化时，从数据库查到数据，存放到redis")]),e._v(" "),n("p",[e._v("2.前端通过在redis中查数据并返回")]),e._v(" "),n("p",[e._v("3.当用户一点击（调用接口) 时，redis中数据加1")]),e._v(" "),n("p",[e._v("4.定期 从redis拿数据更加数据库")]),e._v(" "),n("p",[e._v("理解就是：")]),e._v(" "),n("p",[e._v("在开始时：查数据库放到redis中")]),e._v(" "),n("p",[e._v("从redis读")]),e._v(" "),n("p",[e._v("在redis增加")]),e._v(" "),n("p",[e._v("定时从redis读到数据库中")]),e._v(" "),n("h3",{attrs:{id:"_1-commandlinerunner实现项目启动时预处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-commandlinerunner实现项目启动时预处理"}},[e._v("#")]),e._v(" 1.CommandLineRunner实现项目启动时预处理")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('写ViewCountRunner实现CommandLineRunner --基于springboot\n注意：@Component 注入容器\n\n@Component\npublic class ViewCountRunner implements CommandLineRunner {\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private RedisCache redisCache;\n    @Override\n    public void run(String... args) throws Exception {\n        // 查浏览量\n        List<Article> articles = articleMapper.selectList(null);\n        Map<String, Integer> viewCountMap = articles.stream()\n                .collect(Collectors.toMap(article -> article.getId().toString(), article -> {\n                    return article.getViewCount().intValue();\n                }));\n        // 存到redis\n        redisCache.setCacheMap("article:viewCount",viewCountMap);\n        System.out.println("把浏览量封装给map并存到redis");\n    }\n}\n\n\n')])])]),n("h3",{attrs:{id:"_2-定时任务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-定时任务"}},[e._v("#")]),e._v(" 2.定时任务")]),e._v(" "),n("p",[e._v("基于springboot")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('1.开启定时任务\n\n@SpringBootApplication\n@MapperScan("xyz.zch1337.mapper")\n@EnableScheduling // 开启定时任务\npublic class ZCHBlogApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ZCHBlogApplication.class,args);\n    }\n}\n\n2.确定定时任务执行代码，并配置任务执行时间\n@Scheduled注解标识需要定时执行的代码。注解的cron属性相当于是任务的执行时间\n注意：@Component 注入容器\n\nCron表达式 =>  https://www.bejson.com/othertools/cron/\n\n@Component\npublic class UpdateViewCountJob {\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Autowired\n    private ArticleService articleService;\n    @Scheduled(cron = "0/5 * * * * ?")  // 在方法上添加注解 cron表达式为任务的执行时间\n    public void testJob() {\n        // 在redis中查询浏览量\n        Map<String, Integer> viewCountMap = redisCache.getCacheMap("article:viewCount");\n\n        List<Article> articles = viewCountMap.entrySet()\n                .stream()\n                .map(entry -> new Article(Long.valueOf(entry.getKey()), entry.getValue().longValue()))\n                .collect(Collectors.toList());\n        // 更新到mysql中\n        articleService.updateBatchById(articles);\n    }\n}\n')])])]),n("p",[e._v("3.实现代码")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('1.程序初始化时，从数据库查到数据，存放到redis\n@Component\npublic class ViewCountRunner implements CommandLineRunner {\n\n    @Autowired\n    private ArticleMapper articleMapper;\n\n    @Autowired\n    private RedisCache redisCache;\n    @Override\n    public void run(String... args) throws Exception {\n        // 查浏览量\n        List<Article> articles = articleMapper.selectList(null);\n        Map<String, Integer> viewCountMap = articles.stream()\n                .collect(Collectors.toMap(article -> article.getId().toString(), article -> {\n                    return article.getViewCount().intValue();\n                }));\n        // 存到redis\n        redisCache.setCacheMap("article:viewCount",viewCountMap);\n        System.out.println("把浏览量封装给map并存到redis");\n    }\n}\n\n2.前端通过在redis中查数据并返回\n\n    public R getArticleDetail(Long id) {\n        // 根据id查询文章\n        Article article = getById(id);\n        // 去redis中查询浏览量\n        Integer viewCount = redisCache.getCacheMapValue("article:viewCount", article.getId().toString());\n        article.setViewCount(viewCount.longValue());\n        // 转换为Vo\n        ArticleDetailVo articleDetailVo = BeanCopyUtils.copyBean(article, ArticleDetailVo.class);\n        // 根据分类id查询分类名\n        Category category = categoryService.getById(articleDetailVo.getCategoryId());\n        if (category != null) {\n            articleDetailVo.setCategoryName(category.getName());\n        }\n        // 封装响应返回\n        return R.okResult(articleDetailVo);\n    }\n\n3.当用户一点击（调用接口) 时，redis中数据加1\n\n    public R updateViewCount(Long id) {\n        redisCache.incrementCacheMapValue("article:viewCount",id.toString(),1);\n        return R.okResult();\n    }\n\t\n\tRedisCacha\n\t\n\tpublic void incrementCacheMapValue(String key,String hKey,long v){\n        redisTemplate.boundHashOps(key).increment(hKey, v);\n    }\t\n    \n4.定期 从redis拿数据更加数据库\n\n \t1.开启定时任务\n\n@SpringBootApplication\n@MapperScan("xyz.zch1337.mapper")\n@EnableScheduling // 开启定时任务\npublic class ZCHBlogApplication {\n    public static void main(String[] args) {\n        SpringApplication.run(ZCHBlogApplication.class,args);\n    }\n}\n\n\t2.确定定时任务执行代码，并配置任务执行时间\n@Scheduled注解标识需要定时执行的代码。注解的cron属性相当于是任务的执行时间\n注意：@Component 注入容器\n\nCron表达式 =>  https://www.bejson.com/othertools/cron/\n\n@Component\npublic class UpdateViewCountJob {\n\n    @Autowired\n    private RedisCache redisCache;\n\n    @Autowired\n    private ArticleService articleService;\n    @Scheduled(cron = "0/5 * * * * ?")  // 在方法上添加注解 cron表达式为任务的执行时间\n    public void testJob() {\n        // 在redis中查询浏览量\n        Map<String, Integer> viewCountMap = redisCache.getCacheMap("article:viewCount");\n\n        List<Article> articles = viewCountMap.entrySet()\n                .stream()\n                .map(entry -> new Article(Long.valueOf(entry.getKey()), entry.getValue().longValue()))\n                .collect(Collectors.toList());\n        // 更新到mysql中\n        articleService.updateBatchById(articles);\n    }\n}\n\n\n\n')])])]),n("h2",{attrs:{id:"_8-aop实现日志记录"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-aop实现日志记录"}},[e._v("#")]),e._v(" 8.AOP实现日志记录")]),e._v(" "),n("p",[e._v("0.添加依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        \x3c!--AOP--\x3e\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-aop</artifactId>\n        </dependency>\n        \x3c!--lombk--\x3e\n        <dependency>\n            <groupId>org.projectlombok</groupId>\n            <artifactId>lombok</artifactId>\n            <optional>true</optional>\n        </dependency>\n")])])]),n("p",[e._v("1.自定义注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("@Retention(RetentionPolicy.RUNTIME) // 时机\n@Target({ElementType.METHOD})  // 方法上使用注解\npublic @interface SystemLog {\n    String businessName();\n}\n")])])]),n("p",[e._v("2.写切面类和方法")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('切面类：LogAspect\n\nimport com.alibaba.fastjson.JSON;\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.aspectj.lang.reflect.MethodSignature;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.context.request.RequestContextHolder;\nimport org.springframework.web.context.request.ServletRequestAttributes;\nimport xyz.zch1337.annotation.SystemLog;\n\nimport javax.servlet.http.HttpServletRequest;\n\n@Component // 需要注入到容器中\n@Aspect // 表明是切面类\n@Slf4j\npublic class LogAspect {\n\n    // 切点 当一个方法添加了这个注解 就给他增强\n    @Pointcut("@annotation(xyz.zch1337.annotation.SystemLog)") // 使用自定义注解\n    public void pt() {\n\n    }\n    // 时机\n    @Around("pt()") // @Around 前后都可以\n    public Object printLog(ProceedingJoinPoint joinPoint) throws Throwable { // joinPoint是被增强的方法对象\n                                                                             // Throwable异常给全局异常处理\n        Object ret; // ret是目标方法执行完的返回值\n        try {\n            handleBefore(joinPoint); // 执行目标方法之前\n            ret = joinPoint.proceed(); // 执行目标方法，并得到返回值\n            handleAfter(ret); // 执行目标方法之后\n        } finally {\n            // 打印日志信息\n            // 结束后换行\n            log.info("=======End=======" + System.lineSeparator());\n        }\n\n        return ret; // 返回目标方法执行完的返回值 一定要返回\n    }\n\n    private void handleAfter(Object ret) {\n        // 打印出参\n        log.info("Response       : {}", JSON.toJSONString(ret));\n    }\n\n    private void handleBefore(ProceedingJoinPoint joinPoint) {\n        // AOP中拿到request对象\n        ServletRequestAttributes requestAttributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();\n        HttpServletRequest request = requestAttributes.getRequest();\n\n        // 获取被增强方法上的注解对象\n        SystemLog systemLog = getSystemLog(joinPoint);\n\n        log.info("=======Start=======");\n        // 打印请求 URL\n        log.info("URL            : {}", request.getRequestURL());\n        // 打印描述信息\n        log.info("BusinessName   : {}", systemLog.businessName());\n        // 打印 Http method\n        log.info("HTTP Method    : {}", request.getMethod());\n        // 打印调用 controller 的全路径以及执行方法\n        log.info("Class Method   : {}.{}", joinPoint.getSignature().getDeclaringTypeName(), ((MethodSignature)joinPoint.getSignature()).getName());\n        // 打印请求的 IP\n        log.info("IP             : {}", request.getRemoteHost());\n        // 打印请求入参\n        log.info("Request Args   : {}", JSON.toJSONString(joinPoint.getArgs()));\n    }\n\n    // 获取被增强方法上的注解对象\n    private SystemLog getSystemLog(ProceedingJoinPoint joinPoint) {\n        MethodSignature methodSignature = (MethodSignature) joinPoint.getSignature();\n        SystemLog systemLog = methodSignature.getMethod().getAnnotation(SystemLog.class);\n        return systemLog;\n    }\n}\n\n')])])]),n("h2",{attrs:{id:"_9-上传头像"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-上传头像"}},[e._v("#")]),e._v(" 9.上传头像")]),e._v(" "),n("p",[e._v("一般：上传到服务器，在读取图片的时候会占用比较多的资源。影响应用服务器的性能。")]),e._v(" "),n("p",[e._v("优化：后端接收到数据，上传到oss，生成的外链存到数据库并响应给前端。前端直接去oss拿")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("application.yml\n\toss:\n  \t\taccessKey: jZvRxwYGYmKtLdMUM6typzzweOXEuz7jHQGl1Vtw\n  \t\tsecretKey: HkJm8jBonnXHUsi-9cZO9dghHpxDT5Agl0hWZPLi\n  \t\tbucket: zchtuchuang\n")])])]),n("p",[e._v("controller")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('@RestController\npublic class UploadController {\n    @Autowired\n    private UploadService uploadService;\n    \n    @PostMapping("/upload")\n    public R uploadImg(MultipartFile img) {\n        return uploadService.uploadImg(img);\n    }\n}\n')])])]),n("p",[e._v("service")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("public interface UploadService {\n    R uploadImg(MultipartFile img);\n}\n")])])]),n("p",[e._v("serviceImpl")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import com.google.gson.Gson;\nimport com.qiniu.common.QiniuException;\nimport com.qiniu.http.Response;\nimport com.qiniu.storage.Configuration;\nimport com.qiniu.storage.Region;\nimport com.qiniu.storage.UploadManager;\nimport com.qiniu.storage.model.DefaultPutRet;\nimport com.qiniu.util.Auth;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\nimport xyz.zch1337.domain.R;\nimport xyz.zch1337.enums.AppHttpCodeEnum;\nimport xyz.zch1337.exception.SystemException;\nimport xyz.zch1337.service.UploadService;\nimport xyz.zch1337.utils.PathUtils;\n\nimport java.io.InputStream;\n\n@Service\n@ConfigurationProperties(prefix = "oss") //使用yml中的数据\npublic class UploadServiceImpl implements UploadService {\n    @Override\n    public R uploadImg(MultipartFile img) {\n        // 判断文件类型或者大小\n        // 获取原始文件名\n        String originalFilename = img.getOriginalFilename();\n        if(!originalFilename.endsWith(".png")) {\n            throw new SystemException(AppHttpCodeEnum.FILE_TYPE_ERROR);\n        }\n        // 如果通过上传到oss\n        String filePath = PathUtils.generateFilePath(originalFilename);\n        String url = uploadOss(img, filePath); // 2099/2/3/uuid.png\n        return R.okResult(url);\n    }\n\n    private String accessKey;\n    private String secretKey;\n    private String bucket;\n\n    public void setAccessKey(String accessKey) {\n        this.accessKey = accessKey;\n    }\n\n    public void setSecretKey(String secretKey) {\n        this.secretKey = secretKey;\n    }\n\n    public void setBucket(String bucket) {\n        this.bucket = bucket;\n    }\n\n    private String uploadOss(MultipartFile img, String filePath){\n        //构造一个带指定 Region 对象的配置类\n        Configuration cfg = new Configuration(Region.autoRegion());\n\n        UploadManager uploadManager = new UploadManager(cfg);\n        //...生成上传凭证，然后准备上传\n\n        //默认不指定key的情况下，以文件内容的hash值作为文件名\n        String key = filePath;\n\n        try {\n            InputStream inputStream = img.getInputStream();\n            Auth auth = Auth.create(accessKey, secretKey);\n            String upToken = auth.uploadToken(bucket);\n\n            try {\n                Response response = uploadManager.put(inputStream,key,upToken,null, null);\n                //解析上传成功的结果\n                DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);\n                System.out.println(putRet.key);\n                System.out.println(putRet.hash);\n//                http://rmv9watgr.hn-bkt.clouddn.com/1.png\n                return "http://rmv9watgr.hn-bkt.clouddn.com/" + putRet.key;\n            } catch (QiniuException ex) {\n                Response r = ex.response;\n                System.err.println(r.toString());\n                try {\n                    System.err.println(r.bodyString());\n                } catch (QiniuException ex2) {\n                    //ignore\n                }\n            }\n        } catch (Exception ex) {\n            //ignore\n        }\n        return "errs";\n    }\n\n}\n')])])]),n("h2",{attrs:{id:"_10-swagger2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-swagger2"}},[e._v("#")]),e._v(" 10.Swagger2")]),e._v(" "),n("p",[e._v("1.依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger2</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.springfox</groupId>\n            <artifactId>springfox-swagger-ui</artifactId>\n        </dependency>\n")])])]),n("p",[e._v("2.在启动类上或者配置类加 @EnableSwagger2 注解")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('1.Controller配置\n@Api(tags = "评论",description = "评论相关接口")\n2.接口配置\n    @GetMapping("/linkCommentList")\n    @ApiOperation(value = "友链评论列表",notes = "获取一页友链评论")\n    @ApiImplicitParams({\n           @ApiImplicitParam(name = "pageNum",value = "页号"),\n           @ApiImplicitParam(name = "pageSize",value = "每页大小")\n    }\n    )\n    public ResponseResult linkCommentList(Integer pageNum,Integer pageSize){\n        return commentService.commentList(SystemConstants.LINK_COMMENT,null,pageNum,pageSize);\n    }\n3.实体类配置\n@ApiModel \n\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\n@ApiModel(description = "添加评论dto")\npublic class AddCommentDto{\n    //..\n}\n\n@ApiModelProperty(notes = "评论类型（0代表文章评论，1代表友链评论）")\n    private String type;\n4.文档信息信息配置\n\n@Configuration\npublic class SwaggerConfig {\n    @Bean\n    public Docket customDocket() {\n        return new Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(apiInfo())\n                .select()\n                .apis(RequestHandlerSelectors.basePackage("com.sangeng.controller"))\n                .build();\n    }\n\n    private ApiInfo apiInfo() {\n        Contact contact = new Contact("团队名", "http://www.my.com", "my@my.com");\n        return new ApiInfoBuilder()\n                .title("文档标题")\n                .description("文档描述")\n                .contact(contact)   // 联系方式\n                .version("1.1.0")  // 版本\n                .build();\n    }\n}\n\n')])])]),n("p",[e._v("3.使用")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("http://localhost:7777/swagger-ui.html\n")])])]),n("h2",{attrs:{id:"_11-动态路由"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-动态路由"}},[e._v("#")]),e._v(" 11.动态路由")]),e._v(" "),n("p",[e._v("根据id获取一个列表，转化为tree结构")]),e._v(" "),n("p",[e._v("先写一个mapper，多表查询返回一个列表")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    private List<Menu> buildMenuTree(List<Menu> menuList) {\n        List<Menu> tree = new ArrayList<>();\n\n        for (Menu menu : menuList) {\n            if (menu.getParentId() == 0) {\n                //找子节点\n                Menu childMenu = findChildMenu(menu, menuList);\n                //赋值\n                tree.add(childMenu);\n            }\n        }\n        return tree;\n    }\n    \n        private Menu findChildMenu(Menu menu, List<Menu> menuList) {\n        // 初始化数据\n        menu.setChildren(new ArrayList<Menu>());\n\n        for (Menu menu1 : menuList) {\n\n            if (menu.getId() == menu1.getParentId()) {\n\n                if (menu1.getChildren() == null) {\n                    menu1.setChildren(new ArrayList<Menu>());\n                }\n                menu.getChildren().add(findChildMenu(menu1, menuList));\n            }\n        }\n        return menu;\n    } \n")])])]),n("h2",{attrs:{id:"_12-注解事务"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_12-注解事务"}},[e._v("#")]),e._v(" 12.注解事务")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("    添加注解 @Transactional \n    \n    @Override\n    @Transactional  //事务注解\n    public R addArticle(AddArticleDto addArticleDto) {\n        // 添加文章\n        Article article = BeanCopyUtils.copyBean(addArticleDto, Article.class);\n        save(article);\n\n        // 获取标签列表\n        List<ArticleTag> articleTags = addArticleDto.getTags().stream()\n                .map(tagId -> new ArticleTag(article.getId(), tagId))\n\n                .collect(Collectors.toList());\n        // 添加博客和标签到关联\n        articleTagService.saveBatch(articleTags);\n        return R.okResult();\n    }\n")])])]),n("h2",{attrs:{id:"_13-导出和导入功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_13-导出和导入功能"}},[e._v("#")]),e._v(" 13.导出和导入功能")]),e._v(" "),n("p",[e._v("更多信息")]),e._v(" "),n("p",[e._v("https://easyexcel.opensource.alibaba.com/docs/current/quickstart/write#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81-1")]),e._v(" "),n("h3",{attrs:{id:"_1-依赖"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-依赖"}},[e._v("#")]),e._v(" 1.依赖")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("\x3c!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --\x3e\n<dependency>\n    <groupId>com.alibaba</groupId>\n    <artifactId>easyexcel</artifactId>\n    <version>3.0.5</version>\n</dependency>\n")])])]),n("h3",{attrs:{id:"_2-一些工具"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-一些工具"}},[e._v("#")]),e._v(" 2.一些工具")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('WebUtils\n设置响应头\n    public static void setDownLoadHeader(String filename, HttpServletResponse response) throws UnsupportedEncodingException {\n        response.setContentType("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet");\n        response.setCharacterEncoding("utf-8");\n        String fname= URLEncoder.encode(filename,"UTF-8").replaceAll("\\\\+", "%20");\n        response.setHeader("Content-disposition","attachment; filename="+fname);\n    }\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('ExcelCategoryVo\n\n@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class ExcelCategoryVo {\n    @ExcelProperty("分类名")\n    private String name;\n    //描述\n    @ExcelProperty("描述")\n    private String description;\n\n    //状态0:正常,1禁用\n    @ExcelProperty("状态0:正常,1禁用")\n    private String status;\n}\n')])])]),n("h3",{attrs:{id:"_3-controller"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-controller"}},[e._v("#")]),e._v(" 3.Controller")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('    @GetMapping("/export")\n    public void export(HttpServletResponse response) {\n        try {\n            //设置下载文件的请求头\n            WebUtils.setDownLoadHeader("分类.xlsx", response);\n            //获取需要导出的数据\n            List<Category> list = categoryService.list();\n            List<ExcelCategoryVo> vos = BeanCopyUtils.copyBeanList(list, ExcelCategoryVo.class);\n            //把数据写入到Excel中\n            EasyExcel.write(response.getOutputStream(), ExcelCategoryVo.class)\n                    .autoCloseStream(Boolean.FALSE)\n                    .sheet("分类导出")\n                    .doWrite(vos);\n        } catch (Exception e) {\n            //如果出现异常也要响应json\n            R result = R.errorResult(AppHttpCodeEnum.SYSTEM_ERROR);\n            WebUtils.renderString(response, JSON.toJSONString(result));\n        }\n    }\n')])])])])}),[],!1,null,null,null);n.default=r.exports}}]);