(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{296:function(e,a,t){"use strict";t.r(a);var r=t(13),n=Object(r.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"目录"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[e._v("#")]),e._v(" 目录")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1eureka"}},[e._v("1.Eureka")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#----"}},[e._v("前置知识")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eureke-zookeeper--"}},[e._v("eureke和zookeeper区别")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#cap--"}},[e._v("CAP原则")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("区别")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--eureke"}},[e._v("搭建eureke")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1--server"}},[e._v("1.搭建server")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#2--client"}},[e._v("2.搭建client")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#3----"}},[e._v("3.搭建集群")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#----"}},[e._v("配置文件")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#eureka-server----"}},[e._v("eureka-server配置文件")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eureka-client----"}},[e._v("eureka-client配置文件")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#------ap--eureka--"}},[e._v("构建高可用(AP)的eureka集群")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1eureka-server"}},[e._v("1.eureka-server")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#2eureka-client"}},[e._v("2.eureka-client")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#3--eureka-server-------"}},[e._v("3.搭建eureka-server集群的终极方案")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#4--eureka-client-------"}},[e._v("4.搭建eureka-client集群的终极方案")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#-------"}},[e._v("集群的深入理解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eureka----"}},[e._v("Eureka概念理解")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1-----"}},[e._v("1.服务的注册")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#2-----"}},[e._v("2.服务的续约")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#3-----"}},[e._v("3.服务的下线")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#4-----"}},[e._v("4.服务的剔除")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#5eureka-server----"}},[e._v("5.eureka-server端的功能")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eureka----"}},[e._v("Eureka源码理解")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#1--------bug------"}},[e._v("1.学习源码可以排查bug和优化代码。")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#2eureka----"}},[e._v("2.eureka运作原理")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#3-------------"}},[e._v("3.服务注册的源码分析〖重点〗")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#4----"}},[e._v("4.服务续约")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#5----"}},[e._v("5.服务发现")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#eureka---------"}},[e._v("Eureka服务发现和调用服务")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#--"}},[e._v("环境")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("目标")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#----"}},[e._v("必备知识")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("实现")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("结果")])])])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#2ribbon"}},[e._v("2.Ribbon")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#ibbon---"}},[e._v("ibbon初理解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ribbon----"}},[e._v("ribbon快速入门")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#---1"}},[e._v("环境")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#-----1"}},[e._v("前置知识")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--consumer"}},[e._v("搭建consumer")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#---"}},[e._v("不同点")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ribbon------"}},[e._v("ribbon负载均衡理解")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#---1"}},[e._v("注意点1")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#---------"}},[e._v("轮训算法的代码实现")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ribbon----"}},[e._v("ribbon源码理解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--------"}},[e._v("修改负载均衡算法")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#ribbon--"}},[e._v("Ribbon总结")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#3openfeign"}},[e._v("3.OpenFeign")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#openfeign----"}},[e._v("OpenFeign是什么？")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#openfeign----"}},[e._v("OpenFeign快速入门")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#---2"}},[e._v("环境")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("结构")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#--"}},[e._v("业务")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#---1"}},[e._v("实现")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#openfeign----"}},[e._v("OpenFeign超时调用")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#openfeign--"}},[e._v("OpenFeign日志")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#4hystrix"}},[e._v("4.Hystrix")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#------"}},[e._v("服务雪崩概念")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#hystrix----"}},[e._v("Hystrix快速入门")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#-----"}},[e._v("熔断器理解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#hystrix--"}},[e._v("Hystrix配置")])])])]),e._v(" "),a("li",[a("a",{attrs:{href:"#5---feign------"}},[e._v("5.分布式feign的工程化结构")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#6sleuth"}},[e._v("6.Sleuth")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#7----"}},[e._v("7.监控中心")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#8gateway"}},[e._v("8.Gateway")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#-----"}},[e._v("网关的理解")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#-----"}},[e._v("网关的作用")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#gateway--"}},[e._v("Gateway流程")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#gateway-nginx---"}},[e._v("Gateway和nginx的区别")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#gateway----"}},[e._v("Gateway快速入门")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#----"}},[e._v("网关集群")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#-----------"}},[e._v("代码方式路由和断言工厂")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#----"}},[e._v("动态路由")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#---"}},[e._v("过滤器")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#-------token--"}},[e._v("自定义过滤器-token校验")])])])])])])]),e._v(" "),a("p",[a("small",[a("i",[a("a",{attrs:{href:"http://ecotrust-canada.github.io/markdown-toc/"}},[e._v("Table of contents generated with markdown-toc")])])])]),e._v(" "),a("h1",{attrs:{id:"_1-eureka"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-eureka"}},[e._v("#")]),e._v(" 1.Eureka")]),e._v(" "),a("h2",{attrs:{id:"前置知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识"}},[e._v("#")]),e._v(" 前置知识")]),e._v(" "),a("p",[e._v("eureke是什么？")]),e._v(" "),a("p",[e._v("注册发现中心")]),e._v(" "),a("p",[e._v("注册中心在微服务的架构中相当于一个“服务的通讯录”。当一个服务启动时，需要向注册中心注册服务同时缓存服务列表到本地。当服务A想调用服务B时根据服务列表拿到服务B的地址然后调用。")]),e._v(" "),a("h2",{attrs:{id:"eureke和zookeeper区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureke和zookeeper区别"}},[e._v("#")]),e._v(" eureke和zookeeper区别")]),e._v(" "),a("h3",{attrs:{id:"cap原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap原则"}},[e._v("#")]),e._v(" CAP原则")]),e._v(" "),a("p",[e._v("在分布式中，一致性C、可用性A和分区容错性P三者不可兼得，最多同时实现其中两个。")]),e._v(" "),a("p",[e._v("C一致性：集群中的数据是一致的。")]),e._v(" "),a("p",[e._v("A可用性：当某个机子挂掉，整个集群可以继续对外服务。")]),e._v(" "),a("p",[e._v("P分区容错性：由于网络或分区等原因导致各个机器的数据短暂不一样。")]),e._v(" "),a("p",[e._v("CP：当某个机子挂掉时，集群不能对外提供服务，需要一定时间来恢复。")]),e._v(" "),a("p",[e._v("AP：高可用。当某个机子挂掉时，集群能对外服务，但数据可能是不一致的。")]),e._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[e._v("#")]),e._v(" 区别")]),e._v(" "),a("p",[e._v("zk遵循CP原则：数据一致；eureke遵循AP：高可用。")]),e._v(" "),a("h2",{attrs:{id:"搭建eureke"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建eureke"}},[e._v("#")]),e._v(" 搭建eureke")]),e._v(" "),a("p",[e._v("搭建注册中心，并能够提供注册服务。")]),e._v(" "),a("h3",{attrs:{id:"_1-搭建server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-搭建server"}},[e._v("#")]),e._v(" 1.搭建server")]),e._v(" "),a("p",[e._v("1.添加依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("eureka-server\n")])])]),a("p",[e._v("2.pom文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.修改spring-boot版本号，需要一致\n<version>2.3.12.RELEASE</version>\n2.修改springcloud版本\n<spring-cloud.version>Hoxton.SR12</spring-cloud.version>\n")])])]),a("p",[e._v("3.application.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8761 #eureka默认端口\nspring:\n  application:\n    name: eureka-server #应用名称\n")])])]),a("p",[e._v("4.修改启动程序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaServer // 开启注册中心的功能\npublic class EurekaServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaServerApplication.class, args);\n    }\n\n}\n")])])]),a("p",[e._v("5.Edit Configurations")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name：EurekaServerApplication\n")])])]),a("p",[e._v("6.进入server管理界面查看")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("http://localhost:8761/\n")])])]),a("h3",{attrs:{id:"_2-搭建client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-搭建client"}},[e._v("#")]),e._v(" 2.搭建client")]),e._v(" "),a("p",[e._v("1.添加依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.eureka-client\n2.spring\n")])])]),a("p",[e._v("2.pom文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("1.修改spring-boot版本号，需要一致\n<version>2.3.12.RELEASE</version>\n2.修改springcloud版本\n<spring-cloud.version>Hoxton.SR12</spring-cloud.version>\n")])])]),a("p",[e._v("3.application.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8081 #没有要求随便写\nspring:\n  application:\n    name: eureka-client-b #随便写\neureka: #注册\n  client:\n    service-url:\n      defaultZone: http://localhost:8761/eureka\n")])])]),a("p",[e._v("4.修改启动程序")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaClient  // 开启Client\npublic class EurekaClientBApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(EurekaClientBApplication.class, args);\n    }\n\n}\n")])])]),a("p",[e._v("5.Edit Configurations")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name：EurekaClientBApplication\n")])])]),a("p",[e._v("6.进入server管理界面查看")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("http://localhost:8761/\n")])])]),a("h3",{attrs:{id:"_3-搭建集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-搭建集群"}},[e._v("#")]),e._v(" 3.搭建集群")]),e._v(" "),a("p",[e._v("同一个实例，不同端口。复制一个项目，就修改端口号。")]),e._v(" "),a("p",[e._v("目标：让EurekaClientA搞2台。")]),e._v(" "),a("p",[e._v("1.根据配置文件增加")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Edit Configurations -> copy Configurations\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: EurekaClientAApplication-2\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Modify options -> Program arguments\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Program arguments:   --server.port=8083\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("启动 EurekaClientAApplication-2\n")])])]),a("h2",{attrs:{id:"配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置文件"}},[e._v("#")]),e._v(" 配置文件")]),e._v(" "),a("p",[e._v("eureka分3类 server client 实例(instance)")]),e._v(" "),a("h3",{attrs:{id:"eureka-server配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka-server配置文件"}},[e._v("#")]),e._v(" eureka-server配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8761 #eureka默认端口\nspring:\n  application:\n    name: eureka-server #应用名称\n\neureka:\n  server:\n    eviction-interval-timer-in-ms: 10000 # 服务端间隔多少毫秒做定期删除操作\n    renewal-percent-threshold: 0.85 # 续约百分比 超过85%的应用没有和注册中心续约（心跳机制) 那么eureka会保护服务 不会剔除任何一个\n  instance: # 实例的配置\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #主机名称：应用名称：端口号\n    hostname: localhost # 主机名称或者服务ip\n    prefer-ip-address: true #以ip的形式显示具体的服务信息\n    lease-expiration-duration-in-seconds: 5 # 服务实例的续约的时间间隔  eureka-server是服务端也是客户端\n")])])]),a("h3",{attrs:{id:"eureka-client配置文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka-client配置文件"}},[e._v("#")]),e._v(" eureka-client配置文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8080\nspring:\n  application:\n    name: eureka-client-a\neureka:\n  client:\n    service-url: # 指定注册的地址\n      defaultZone: http://localhost:8761/eureka\n    register-with-eureka: true # false可以不向eureka-server注册\n    fetch-registry: true # 是否拉取服务列表 如果为false，该应用会找不到其他的应用\n    registry-fetch-interval-seconds: 10  # 定期拉取服务列表的间隔 为了缓解服务列表的脏读问题 时间越短->脏读越少->性能消耗越大\n  instance: # 实例配置\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #主机名称：应用名称：端口号\n    hostname: localhost # 应用的主机名称 最好写ip\n    prefer-ip-address: true #以ip的形式显示具体的服务信息\n    lease-expiration-duration-in-seconds: 10 # 服务实例的续约的时间间隔\n")])])]),a("h2",{attrs:{id:"构建高可用-ap-的eureka集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构建高可用-ap-的eureka集群"}},[e._v("#")]),e._v(" 构建高可用(AP)的eureka集群")]),e._v(" "),a("h3",{attrs:{id:"_1-eureka-server"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-eureka-server"}},[e._v("#")]),e._v(" 1.eureka-server")]),e._v(" "),a("p",[e._v("eureka集群采用去中心化模式")]),e._v(" "),a("p",[e._v("1.建立三个eureka-server")]),e._v(" "),a("p",[e._v("2.修改pom.xml文件")]),e._v(" "),a("p",[e._v("3.修改application.yml --互相注册")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server-a\n\nserver:\n  port: 8761 #eureka默认端口\nspring:\n  application:\n    name: eureka-server #应用名称\neureka:\n  client:\n    service-url: #向其他机器注册 默认向8761注册\n      defaultZone: http://localhost:8762/eureka,http://localhost:8763/eureka\n  instance: # 实例的配置\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #主机名称：应用名称：端口号\n    hostname: localhost # 主机名称或者服务ip\n    prefer-ip-address: true #以ip的形式显示具体的服务信息\n    lease-expiration-duration-in-seconds: 5 # 服务实例的续约的时间间隔  eureka-server是服务端也是客户端\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server-b\n\nserver:\n  port: 8762 #eureka默认端口\nspring:\n  application:\n    name: eureka-server #应用名称不能改 这里是集群\neureka:\n  client:\n    service-url: #向其他机器注册 默认向8761注册\n      defaultZone: http://localhost:8761/eureka,http://localhost:8763/eureka\n  instance: # 实例的配置\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #主机名称：应用名称：端口号\n    hostname: localhost # 主机名称或者服务ip\n    prefer-ip-address: true #以ip的形式显示具体的服务信息\n    lease-expiration-duration-in-seconds: 5 # 服务实例的续约的时间间隔  eureka-server是服务端也是客户端\n\n")])])]),a("p",[e._v("4.修改启动程序")]),e._v(" "),a("p",[e._v("5.Edit Configurations")]),e._v(" "),a("p",[e._v("6.进入server管理界面查看")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("http://localhost:8761/\nhttp://localhost:8762/\nhttp://localhost:8763/\n")])])]),a("p",[e._v("7.此时不是集群 没有数据交互")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("需要搞三台电脑\n修改 ‪C:\\Windows\\System32\\drivers\\etc\\hosts 文件来欺骗他\n添加：\n\t127.0.0.1 peer1\n\t127.0.0.1 peer2\n\t127.0.0.1 peer3\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("修改application.yml\n\na\ndefaultZone: http://peer2:8762/eureka,http://peer3:8763/eureka\nhostname: peer1 # 主机名称或者服务ip\n三个都要对应修改\n")])])]),a("p",[e._v("8.进入server管理界面查看")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("http://localhost:8761/\nhttp://localhost:8762/\nhttp://localhost:8763/\n\nDS Replicas 查看\n")])])]),a("p",[e._v("9.测试")]),e._v(" "),a("p",[e._v("让client注册")]),e._v(" "),a("h3",{attrs:{id:"_2-eureka-client"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-eureka-client"}},[e._v("#")]),e._v(" 2.eureka-client")]),e._v(" "),a("p",[e._v("3.修改application.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8080\nspring:\n  application:\n    name: eureka-client-a\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://peer1:8761/eureka      ！！！！！！！！！！修改为peer1！！！！！！\n    register-with-eureka: true # false????eureka-server??\n    fetch-registry: true # ???????? ???false?????????????\n    registry-fetch-interval-seconds: 10  # ??????????? ????????????? ????->????->??????\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\n    lease-expiration-duration-in-seconds: 10 # ????????????\n")])])]),a("p",[e._v("6.进入server管理界面查看")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("发现配置文件中只注册了peer1，结果是全部都注册了，是server集群的扩散造成的。\n")])])]),a("h3",{attrs:{id:"_3-搭建eureka-server集群的终极方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-搭建eureka-server集群的终极方案"}},[e._v("#")]),e._v(" 3.搭建eureka-server集群的终极方案")]),e._v(" "),a("p",[e._v("发现只有hostname、端口和defaultZone不一样")]),e._v(" "),a("p",[e._v("使用配置文件来搭建")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("先创建第一台\n\n其中配置文件为：\n# 集群的终极方案\nserver:\n  port: 8761 #eureka默认端口\nspring:\n  application:\n    name: eureka-server #应用名称\neureka:\n  client:\n    service-url: #向其他机器注册 默认向8761注册\n      defaultZone: http://peer1:8761/eureka,http://peer2:8762/eureka,http://peer3:8763/eureka\n  instance: # 实例的配置\n    instance-id: ${spring.application.name}:${server.port} #主机名称：应用名称：端口号\n#    hostname: peer1 # 主机名称或者服务ip\n    prefer-ip-address: true #以ip的形式显示具体的服务信息\n    lease-expiration-duration-in-seconds: 5 # 服务实例的续约的时间间隔  eureka-server是服务端也是客户端\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("建立好第一台后\n我们只需要修改配置文件的端口，启动3台即可.\n")])])]),a("h3",{attrs:{id:"_4-搭建eureka-client集群的终极方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-搭建eureka-client集群的终极方案"}},[e._v("#")]),e._v(" 4.搭建eureka-client集群的终极方案")]),e._v(" "),a("p",[e._v("使用配置文件来搭建")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("先创建第一台\n\n其中配置文件为：       !!!!向所有的都注册!!!!!!!!!!向所有的都注册!!!!!!!!!!向所有的都注册!!!!!!\n# client终极方案\nserver:\n  port: 8080\nspring:\n  application:\n    name: eureka-client-a\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://peer1:8761/eureka,http://peer2:8762/eureka,http://peer3:8763/eureka !!!!向所有的都注册!!!!!!\n    register-with-eureka: true # false????eureka-server??\n    fetch-registry: true # ???????? ???false?????????????\n    registry-fetch-interval-seconds: 10  # ??????????? ????????????? ????->????->??????\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\n    lease-expiration-duration-in-seconds: 10 # ????????????\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("建立好第一台后\n我们只需要修改配置文件的端口，启动3台即可.\n")])])]),a("h2",{attrs:{id:"集群的深入理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群的深入理解"}},[e._v("#")]),e._v(" 集群的深入理解")]),e._v(" "),a("p",[e._v("如果是主从模式，主机改怎么选择，怎么保证数据的一致性?")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://thesecretlivesofdata.com/raft/",target:"_blank",rel:"noopener noreferrer"}},[e._v("筏 (thesecretlivesofdata.com)"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("哨兵模式：如果主机挂了，选择一个从计当主机。选哪台？投票!怎么投票？根据分布式数据一致性协议来投票!分布式数据一致性协议包括1.选主机2.保持数据一致性!")]),e._v(" "),a("h2",{attrs:{id:"eureka概念理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka概念理解"}},[e._v("#")]),e._v(" Eureka概念理解")]),e._v(" "),a("h3",{attrs:{id:"_1-服务的注册"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-服务的注册"}},[e._v("#")]),e._v(" 1.服务的注册")]),e._v(" "),a("p",[e._v("当服务(客户端)启动时，会向eureka-server发送自己的原始数据，eureka-server会在自己内存中保存这些数据(服务列表)。")]),e._v(" "),a("h3",{attrs:{id:"_2-服务的续约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-服务的续约"}},[e._v("#")]),e._v(" 2.服务的续约")]),e._v(" "),a("p",[e._v("服务启动了，除了注册外，还会定时向eureka-server汇报自己，表示自己还活着。(心跳机制)")]),e._v(" "),a("h3",{attrs:{id:"_3-服务的下线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务的下线"}},[e._v("#")]),e._v(" 3.服务的下线")]),e._v(" "),a("p",[e._v("服务关闭了，会给eureka-server报告。eureka-server会告诉其他服务，这个服务下线了。")]),e._v(" "),a("h3",{attrs:{id:"_4-服务的剔除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务的剔除"}},[e._v("#")]),e._v(" 4.服务的剔除")]),e._v(" "),a("p",[e._v("如果服务超过了eureka-server的指定时间汇报自己，eureka-server认为改服务挂掉了。")]),e._v(" "),a("h3",{attrs:{id:"_5-eureka-server端的功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-eureka-server端的功能"}},[e._v("#")]),e._v(" 5.eureka-server端的功能")]),e._v(" "),a("p",[e._v("1.通讯录功能：有一份服务列表记录各个服务信息。服务拿到这个服务列表就可以调用其他服务。")]),e._v(" "),a("p",[e._v("2.服务订阅功能：当新的服务上线了或者下线了，会告诉各个服务，更新服务列表。")]),e._v(" "),a("p",[e._v("3.服务健康监测功能")]),e._v(" "),a("h2",{attrs:{id:"eureka源码理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka源码理解"}},[e._v("#")]),e._v(" Eureka源码理解")]),e._v(" "),a("h3",{attrs:{id:"_1-学习源码可以排查bug和优化代码。"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-学习源码可以排查bug和优化代码。"}},[e._v("#")]),e._v(" 1.学习源码可以排查bug和优化代码。")]),e._v(" "),a("h3",{attrs:{id:"_2-eureka运作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-eureka运作原理"}},[e._v("#")]),e._v(" 2.eureka运作原理")]),e._v(" "),a("p",[e._v("eureka-server对外提供的是restful风格的服务。get、post、put、delete发请求。")]),e._v(" "),a("p",[e._v("eureka利用restful风格的接口来实现注册和发现。")]),e._v(" "),a("h3",{attrs:{id:"_3-服务注册的源码分析〖重点〗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-服务注册的源码分析〖重点〗"}},[e._v("#")]),e._v(" 3.服务注册的源码分析〖重点〗")]),e._v(" "),a("p",[e._v("客户端怎么发-----server端怎么接收怎么保存")]),e._v(" "),a("p",[e._v("客户端怎么发：")]),e._v(" "),a("p",[e._v("客户端发送一个请求把自己的信息给服务端。")]),e._v(" "),a("p",[e._v("server接收到请求后，把信息存到")]),e._v(" "),a("h3",{attrs:{id:"_4-服务续约"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-服务续约"}},[e._v("#")]),e._v(" 4.服务续约")]),e._v(" "),a("p",[e._v("本质就是发一个更新请求(put)。")]),e._v(" "),a("h3",{attrs:{id:"_5-服务发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-服务发现"}},[e._v("#")]),e._v(" 5.服务发现")]),e._v(" "),a("p",[e._v("服务a要调用服务b")]),e._v(" "),a("p",[e._v("服务a根据服务的应用名称找到服务的ip和端口。")]),e._v(" "),a("p",[e._v("在java代码中发起http请求，拿到数据。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\n@RequestMapping("/order")\npublic class OrderController {\n    @Autowired\n    RestTemplate restTemplate;\n\n    @Autowired\n    private DiscoveryClient discoveryClient;\n\n    @GetMapping("/add/{id}")\n    public Goods add(@PathVariable("id") Integer id){\n        //业务逻辑\n        //1查询商品\n        //2减库存\n        //3支付\n        //4物流\n        //直接调用\n        //String url="http://localhost:8000/goods/findById/"+id;\n        //Goods goods = restTemplate.getForObject(url, Goods.class);\n\n        //服务发现\n        List<ServiceInstance> instances = discoveryClient.getInstances("EUREKA-PROVIDER");\n        if(instances==null||instances.size()<=0){\n            return null;\n        }\n        //通过某个策略拿到一个实例\n        ServiceInstance serviceInstance = instances.get(0);\n        String host = serviceInstance.getHost();\n        int port = serviceInstance.getPort();\n        System.out.println(host);\n        System.out.println(port);\n\n        String url="http://"+host+":"+port+"/goods/findById/"+id;\n        Goods goods = restTemplate.getForObject(url, Goods.class);\n\n        return goods;\n    }\n}\n')])])]),a("h2",{attrs:{id:"eureka服务发现和调用服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#eureka服务发现和调用服务"}},[e._v("#")]),e._v(" Eureka服务发现和调用服务")]),e._v(" "),a("h3",{attrs:{id:"环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境"}},[e._v("#")]),e._v(" 环境")]),e._v(" "),a("p",[e._v("一个注册中心eureka-server；俩个客户端client-a和client-b都已经注册；")]),e._v(" "),a("h3",{attrs:{id:"目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#目标"}},[e._v("#")]),e._v(" 目标")]),e._v(" "),a("p",[e._v("一个用户访问client-a，client-a需要调用client-b的服务；")]),e._v(" "),a("h3",{attrs:{id:"必备知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必备知识"}},[e._v("#")]),e._v(" 必备知识")]),e._v(" "),a("p",[e._v("eureka的服务发现和java发请求")]),e._v(" "),a("h3",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),a("p",[e._v("eureka-a的接口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class TestController {\n    @Autowired\n    private DiscoveryClient discoveryClient;\n    @GetMapping("/test")\n    public String test() {\n        // 知识点 服务发现\n        // 根据应用名称获取服务的ip和端口\n        List<ServiceInstance> instances = discoveryClient.getInstances("EUREKA-CLIENT-B");\n        ServiceInstance b = instances.get(0);\n        String host = b.getHost();\n        int port = b.getPort();\n        // 拼接url\n        String url = "http://" + host + ":" +port + "/getUserInfo";\n        System.out.println(url);\n        // 使用restTemplate发送请求\n        RestTemplate restTemplate = new RestTemplate();\n        String result = restTemplate.getForObject(url, String.class);\n        System.out.println(result);\n        return "ok";\n    }\n}\n')])])]),a("p",[e._v("eureka-a的接口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class TestController {\n    @GetMapping("/getUserInfo")\n    public String test(){\n        return "这是服务b提供的服务";\n    }\n}\n')])])]),a("h3",{attrs:{id:"结果"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[e._v("#")]),e._v(" 结果")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("向a发送get请求：http://localhost:8080/test\n\n结果：\nhttp://169.254.141.199:8081/getUserInfo\n这是服务b提供的服务\n")])])]),a("h1",{attrs:{id:"_2-ribbon"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-ribbon"}},[e._v("#")]),e._v(" 2.Ribbon")]),e._v(" "),a("h2",{attrs:{id:"ibbon初理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ibbon初理解"}},[e._v("#")]),e._v(" ibbon初理解")]),e._v(" "),a("p",[e._v("ribbon是一个工具，用来给"),a("strong",[e._v("客户端")]),e._v("提供负载均衡服务的，主要提供负载均衡算法和服务调用。简单来说：ribbon帮我们发起一个远程调用并提供负载均衡服务。")]),e._v(" "),a("h2",{attrs:{id:"ribbon快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon快速入门"}},[e._v("#")]),e._v(" ribbon快速入门")]),e._v(" "),a("h3",{attrs:{id:"环境-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境-2"}},[e._v("#")]),e._v(" 环境")]),e._v(" "),a("p",[e._v("一个注册中心，一个provider集群，一个consumer")]),e._v(" "),a("h3",{attrs:{id:"前置知识-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前置知识-2"}},[e._v("#")]),e._v(" 前置知识")]),e._v(" "),a("p",[e._v("提供者和消费者都是client，消费者是在浏览器上调用而已，提供者往往提供远程调用服务")]),e._v(" "),a("h3",{attrs:{id:"搭建consumer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#搭建consumer"}},[e._v("#")]),e._v(" 搭建consumer")]),e._v(" "),a("p",[e._v("流程和eureka-client一致")]),e._v(" "),a("h3",{attrs:{id:"不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[e._v("#")]),e._v(" 不同点")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("        ribbon依赖\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>\n            <version>2.2.9.RELEASE</version>\n        </dependency>\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaClient\npublic class ConsumerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(ConsumerApplication.class, args);\n    }\n\n\n    @Bean // 注入RestTemplate对象到容器\n    @LoadBalanced // 使用ribbon优化RestTemplate对象\n    public RestTemplate restTemplate(){\n        return new RestTemplate();\n    }\n}\n")])])]),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class ConsumerController {\n\n    @Autowired\n    private RestTemplate restTemplate;\n\n    @GetMapping("/testRibbon")\n    public String testRibbon(String serviceName) {\n        // 这里没有提供端口 让ribbon来选择\n        String result = restTemplate.getForObject("http://" + serviceName + "/hello", String.class);\n        return result;\n    }\n}\n')])])]),a("h2",{attrs:{id:"ribbon负载均衡理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon负载均衡理解"}},[e._v("#")]),e._v(" ribbon负载均衡理解")]),e._v(" "),a("h3",{attrs:{id:"注意点1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意点1"}},[e._v("#")]),e._v(" 注意点1")]),e._v(" "),a("p",[e._v("你需要知道@LoadBalanced优化了RestTemplate对象后，如果你想使用原生的RestTemplate对象，你需要重新创建一个对象。")]),e._v(" "),a("h3",{attrs:{id:"轮训算法的代码实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#轮训算法的代码实现"}},[e._v("#")]),e._v(" 轮训算法的代码实现")]),e._v(" "),a("p",[e._v("List<机器>     取模运算 size集群的台数")]),e._v(" "),a("p",[e._v("全局变量 i = 0")]),e._v(" "),a("p",[e._v("每访问一次 i++")]),e._v(" "),a("p",[e._v("i%size")]),e._v(" "),a("p",[e._v("为了线程安全 加CAS自选锁")]),e._v(" "),a("h2",{attrs:{id:"ribbon源码理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon源码理解"}},[e._v("#")]),e._v(" ribbon源码理解")]),e._v(" "),a("p",[e._v("没有过于深的理解")]),e._v(" "),a("h2",{attrs:{id:"修改负载均衡算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修改负载均衡算法"}},[e._v("#")]),e._v(" 修改负载均衡算法")]),e._v(" "),a("p",[e._v("访问不同的服务可以选择不同的负载均衡算法")]),e._v(" "),a("p",[e._v("1.修改yml文件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("provider: #先写服务者的应用名称\n  ribbon:\n    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule #算法的全限定类名 Rule  com.netflix.loadbalancer.RandomRule\n")])])]),a("p",[e._v("2.全局配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("    /**\n     * 往容器放一个rule对象\n     * 访问任何一个提供者都使用这个算法\n     * @return\n     */\n    @Bean\n    public IRule myRule(){\n        return new RandomRule();\n    }\n")])])]),a("h2",{attrs:{id:"ribbon总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ribbon总结"}},[e._v("#")]),e._v(" Ribbon总结")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Ribbon 是 客户端实现负载均衡的远程调用组件 ，用法简单\nRibbon 源码核心：\nILoadBalancer 接口：起到承上启下的作用\n1. 承上：从 eureka 拉取服务列表\n2. 启下：使用 IRule 算法实现客户端调用的负载均衡\n\n   设计思想：每一个服务提供者都有自己的 ILoadBalancer\n   userService--- 》客户端有自己的 ILoadBalancer\n   TeacherService--- 》客户端有自己的 ILoadBalancer\n   在客户端里面就是 Map<String,ILoadBalancer> iLoadBalancers\n   Map<String,ILoadBalancer> iLoadBalancers 消费者端\n   服务提供者的名称 value （服务列表 算法规则 ）\n   如何实现负载均衡的呢？\n   iloadBalancer loadbalance = iloadBalancers.get(“user-service”)\n   List<Server> servers = Loadbalance.getReachableServers();// 缓存起来\n   Server server = loadbalance .chooseServer(key) //key 是区 id ， -- 》 IRule 算法\n   chooseServer 下面有一个 IRule 算法\n   IRule 下面有很多实现的负载均衡算法\n   你就可以使用 eureka+ribbon 做分布式项目\n")])])]),a("h1",{attrs:{id:"_3-openfeign"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-openfeign"}},[e._v("#")]),e._v(" 3.OpenFeign")]),e._v(" "),a("h2",{attrs:{id:"openfeign是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openfeign是什么"}},[e._v("#")]),e._v(" OpenFeign是什么？")]),e._v(" "),a("p",[e._v("OpenFeign是一个声明式的web service client，帮我们实现远程服务调用的。ribbon来解决负载均衡，OpenFeign进一步优化远程服务调用。注意：feign只是封装了ribbon，底层是ribbon。")]),e._v(" "),a("h2",{attrs:{id:"openfeign快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openfeign快速入门"}},[e._v("#")]),e._v(" OpenFeign快速入门")]),e._v(" "),a("h3",{attrs:{id:"环境-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境-3"}},[e._v("#")]),e._v(" 环境")]),e._v(" "),a("p",[e._v("一个注册中心，两个服务user-service和orderservice")]),e._v(" "),a("h3",{attrs:{id:"结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构"}},[e._v("#")]),e._v(" 结构")]),e._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-mermaid"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("graph")]),e._v(" TB\n  注册中心"),a("span",{pre:!0,attrs:{class:"token text string"}},[e._v("(注册中心)")]),e._v("\n  user-service"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[e._v("--\x3e")]),e._v("注册中心"),a("span",{pre:!0,attrs:{class:"token text string"}},[e._v("(注册中心)")]),e._v("\n  order-service"),a("span",{pre:!0,attrs:{class:"token arrow operator"}},[e._v("--\x3e")]),e._v("注册中心"),a("span",{pre:!0,attrs:{class:"token text string"}},[e._v("(注册中心)")]),e._v("\n\n")])])]),a("h3",{attrs:{id:"业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#业务"}},[e._v("#")]),e._v(" 业务")]),e._v(" "),a("p",[e._v("浏览器访问user-service提供的服务，user-service调用order-service的服务")]),e._v(" "),a("h3",{attrs:{id:"实现-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-2"}},[e._v("#")]),e._v(" 实现")]),e._v(" "),a("p",[e._v("1.order-service的服务")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class OrderController {\n    @GetMapping("/doOrder")\n    public String doOrder() {\n        return "油条";\n    }\n}\n')])])]),a("p",[e._v("2.user-service添加pom依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-openfeign</artifactId>\n        </dependency>\n")])])]),a("p",[e._v("3.user-service启动类添加@EnableFeignClients注解")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaClient\n@EnableFeignClients // 开启openfeign\npublic class UserServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(UserServiceApplication.class, args);\n    }\n\n}\n")])])]),a("p",[e._v("4.在xyz.zch1337.feign包中新建UserOrderFeign接口")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('package xyz.zch1337.feign;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.GetMapping;\n\n@FeignClient(value = "order-service")\npublic interface UserOrderFeign { //接口名 要见知意\n\t// 写需要的服务方法签名\n    @GetMapping("/doOrder")\n    public String doOrder();\n}\n')])])]),a("p",[e._v("5.user-service注入并调用")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@RestController\npublic class UserController {\n\n    @Autowired // 注入\n    private UserOrderFeign userOrderFeign;\n\n    @GetMapping("/userDoOrder")\n    public String userDoOrder() {\n        System.out.println("用户来了");\n        // 调用\n        String s = userOrderFeign.doOrder();\n        return s;\n    }\n}\n')])])]),a("h2",{attrs:{id:"openfeign超时调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openfeign超时调用"}},[e._v("#")]),e._v(" OpenFeign超时调用")]),e._v(" "),a("p",[e._v("feign默认等待时间是1s，超过就报错")]),e._v(" "),a("p",[e._v("user-service可以配置等待时间")]),e._v(" "),a("p",[e._v("注意：feign只是封装了ribbon，底层是ribbon")]),e._v(" "),a("p",[e._v("user-service   yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("ribbon:\n  ReadTimeout: 3000 #超时等待时间为3s 默认1s\n  ConnectTimeout: 3000 #修改连接时长为3s 默认1s\n")])])]),a("h2",{attrs:{id:"openfeign日志"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#openfeign日志"}},[e._v("#")]),e._v(" OpenFeign日志")]),e._v(" "),a("p",[e._v("yml 开启日志打印")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("logging:\n  level:\n      xyz.zch1337.feign.UserOrderFeign: debug  #打印这个接口下的日志\n")])])]),a("p",[e._v("启动类 注入")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaClient\n@EnableFeignClients // 开启openfeign\npublic class UserServiceApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(UserServiceApplication.class, args);\n    }\n\n\n    /***\n     * 打印日志信息\n     * @return\n     */\n    @Bean\n    public Logger.Level level() {\n        return Logger.Level.FULL;\n    }\n\n}\n")])])]),a("h1",{attrs:{id:"_4-hystrix"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-hystrix"}},[e._v("#")]),e._v(" 4.Hystrix")]),e._v(" "),a("p",[e._v("熔断器，也可以叫断路器。用来保护微服务不雪崩。正常情况下，断路器是关闭状态，当出问题了，才会打开。")]),e._v(" "),a("h2",{attrs:{id:"服务雪崩概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务雪崩概念"}},[e._v("#")]),e._v(" 服务雪崩概念")]),e._v(" "),a("p",[e._v("在微服务中，会存在大量的链式调用，a调b，b调c，如果c宕机了，会导致a和b线程没法及时回收，在高并发的压力下，容易引起服务器宕机。")]),e._v(" "),a("p",[e._v("服务雪崩的本质：没有及时回收线程。")]),e._v(" "),a("p",[e._v("解决方法：")]),e._v(" "),a("ol",[a("li",[e._v("b调c时，减小超时等待时间。效果：可以轻微但不灵活。")]),e._v(" "),a("li",[e._v("b调c前，先判断下一层服务的状态，如果c宕机了，直接return。")])]),e._v(" "),a("h2",{attrs:{id:"hystrix快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix快速入门"}},[e._v("#")]),e._v(" Hystrix快速入门")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>\n        </dependency>\n")])])])]),e._v(" "),a("li",[a("p",[e._v("写CustomerRentFeignHystrix实现接口，注意规范")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230141204.png",alt:""}})]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('CustomerRentFeignHystrix\n\n@Component // 要注入容器\npublic class CustomerRentFeignHystrix implements CustomerRentFeign {\n    // 这个方法就是备选方案\n    @Override\n    public String rent() {\n        return "我被hystrix处理了";\n    }\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("CustomerRentFeign接口添加注解")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@FeignClient(value = "rent-car-service",fallback = CustomerRentFeignHystrix.class) // 指定让那个类来处理失败\npublic interface CustomerRentFeign {\n    @GetMapping("/rent")\n    public String rent();\n}\n')])])])]),e._v(" "),a("li",[a("p",[e._v("开启hystrix熔断器")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8081\nspring:\n  application:\n    name: customer-service\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\nfeign:\n  hystrix:\n    enabled: true #默认是关闭的 需要手动打开\n")])])])]),e._v(" "),a("li",[a("p",[e._v("结果")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230141831.png",alt:""}})])])]),e._v(" "),a("h2",{attrs:{id:"熔断器理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#熔断器理解"}},[e._v("#")]),e._v(" 熔断器理解")]),e._v(" "),a("p",[e._v("本质就是一个拦截器，远程调用前先判断下层服务的状态。")]),e._v(" "),a("p",[e._v("注意：hystrix的本质是代理feign的请求来完成熔断的效果。")]),e._v(" "),a("p",[e._v("原理：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230143531.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"hystrix配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hystrix配置"}},[e._v("#")]),e._v(" Hystrix配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8081\nspring:\n  application:\n    name: customer-service\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\nfeign:  #开启feign的hystrix\n  hystrix:\n    enabled: true\nhystrix: #hystrix 的全局控制\n  command:\n    default: #default 是全局控制，也可以换成单个方法控制，把 default 换成方法名即可\n      fallback:\n        isolation:\n          semaphore:\n            maxConcurrentRequests: 1000 #信号量隔离级别最大并发数\n      circuitBreaker:\n        enabled: true #开启断路器\n        requestVolumeThreshold: 3 #失败次数（阀值）\n        sleepWindowInMilliseconds: 20000 #窗口时间\n        errorThresholdPercentage: 60 #失败率\n      execution:\n        isolation:\n          Strategy: thread #隔离方式 thread 线程隔离集合和 SEMAPHORE 信号量隔离级别\n          thread:\n            timeoutInMilliseconds: 3000 #调用超时时长\nribbon:\n  ReadTimeout: 5000 #要结合 feign 的底层 ribbon 调用的时长\n  ConnectTimeout: 500\n")])])]),a("h1",{attrs:{id:"_5-分布式feign的工程化结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-分布式feign的工程化结构"}},[e._v("#")]),e._v(" 5.分布式feign的工程化结构")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230193933.png",alt:""}})]),e._v(" "),a("h1",{attrs:{id:"_6-sleuth"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-sleuth"}},[e._v("#")]),e._v(" 6.Sleuth")]),e._v(" "),a("h2",{attrs:{id:"zipkin可视化的监控控制台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#zipkin可视化的监控控制台"}},[e._v("#")]),e._v(" zipkin可视化的监控控制台")]),e._v(" "),a("p",[e._v("运行 zipkin")]),e._v(" "),a("p",[e._v("java -jar zipkin-server-2.12.9-exec.jar")]),e._v(" "),a("p",[e._v("http://localhost:9411/  查看")]),e._v(" "),a("h2",{attrs:{id:"sleuth快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sleuth快速入门"}},[e._v("#")]),e._v(" Sleuth快速入门")]),e._v(" "),a("p",[e._v("1.依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("<dependency>\n<groupId>org.springframework.cloud</groupId>\n<artifactId>spring-cloud-starter-zipkin</artifactId>\n</dependency\n")])])]),a("p",[e._v("2.yml配置文件")]),e._v(" "),a("p",[e._v("需要被监控的服务 都要配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 8080\nspring:\n  application:\n    name: order-service\n  zipkin:\n    base-url: http://localhost:9411\n  sleuth:\n    sampler:\n      probability: 1 #配置采样率 默认的采样比例为: 0.1，即 10%，所设置的值介于 0 到 1 之间，1 则表示全部采集\n      rate: 10 #为了使用速率限制采样器,选择每秒间隔接受的 trace 量\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\n")])])]),a("h1",{attrs:{id:"_7-监控中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-监控中心"}},[e._v("#")]),e._v(" 7.监控中心")]),e._v(" "),a("p",[e._v("1.依赖")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("           <spring-boot-admin.version>2.3.0</spring-boot-admin.version>\n           \n\t\t<dependency>\n            <groupId>de.codecentric</groupId>\n            <artifactId>spring-boot-admin-starter-server</artifactId>\n        </dependency>           \n           \n           <dependency>\n                <groupId>de.codecentric</groupId>\n                <artifactId>spring-boot-admin-dependencies</artifactId>\n                <version>${spring-boot-admin.version}</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n")])])]),a("p",[e._v("2.yml")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 10086\nspring:\n  application:\n    name: admih-server\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\nmanagement:\n  endpoints:\n    web:\n      exposure:\n        include: '*' # 暴露所有的监控端点\n\n")])])]),a("p",[e._v("3.启动类")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("@SpringBootApplication\n@EnableEurekaClient\n@EnableAdminServer // 开启服务监控\npublic class AdminServerApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(AdminServerApplication.class, args);\n    }\n\n}\n")])])]),a("p",[e._v("4.结果")]),e._v(" "),a("p",[e._v("可以在控制台看到所有的接口 这里没有启动")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221231222916.png",alt:""}})]),e._v(" "),a("p",[e._v("也可以在zipkin看到")]),e._v(" "),a("h1",{attrs:{id:"_8-gateway"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-gateway"}},[e._v("#")]),e._v(" 8.Gateway")]),e._v(" "),a("h2",{attrs:{id:"网关的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关的理解"}},[e._v("#")]),e._v(" 网关的理解")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230213703.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"网关的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关的作用"}},[e._v("#")]),e._v(" 网关的作用")]),e._v(" "),a("ol",[a("li",[e._v("路由转发")]),e._v(" "),a("li",[e._v("安全控制")]),e._v(" "),a("li",[e._v("负载均衡等")])]),e._v(" "),a("h2",{attrs:{id:"gateway流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway流程"}},[e._v("#")]),e._v(" Gateway流程")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20200728132755585.jpg",alt:""}})]),e._v(" "),a("p",[e._v("核心是：路由转发+过滤器链")]),e._v(" "),a("h2",{attrs:{id:"gateway和nginx的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway和nginx的区别"}},[e._v("#")]),e._v(" Gateway和nginx的区别")]),e._v(" "),a("p",[e._v("gateway是项目级别的，nginx是服务器级别的。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221230215524.png",alt:""}})]),e._v(" "),a("h2",{attrs:{id:"gateway快速入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gateway快速入门"}},[e._v("#")]),e._v(" Gateway快速入门")]),e._v(" "),a("h2",{attrs:{id:"网关集群"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网关集群"}},[e._v("#")]),e._v(" 网关集群")]),e._v(" "),a("p",[e._v("起多台网关 在nginx里面配置")]),e._v(" "),a("h2",{attrs:{id:"代码方式路由和断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码方式路由和断言工厂"}},[e._v("#")]),e._v(" 代码方式路由和断言工厂")]),e._v(" "),a("p",[e._v("配置文件路由")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configuration\npublic class RouteConfig {\n    @Bean\n    public RouteLocator customRouteLocator(RouteLocatorBuilder builder) {\n        return builder.routes()\n                // id要唯一  /guochuang 匹配条件  如果匹配成功 去https://www.bilibili.com/guochuang  会拼接在后面\n                .route("test-id1", r -> r.path("/guochuang")\n                        .uri("https://www.bilibili.com/"))\n                .route("test-id2", r -> r.path("/variety")\n                        .uri("https://www.bilibili.com/"))\n                .build();\n    }\n}\n')])])]),a("p",[e._v("yml路由")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("spring:\n  application:\n    name: gateway-server\n  redis:\n    host: 124.222.237.176\n    port: 6379\n  cloud:\n    gateway:\n      enabled: true\n      discovery:\n        locator:\n          enabled: true # ??????\n          lower-case-service-id: true # ??\n      routes:\n        - id: login-service-route\n          uri: http://localhost:8081\n          predicates: # 断言\n            - Path=/doLogin # 条件\n")])])]),a("h2",{attrs:{id:"动态路由和断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态路由和断言工厂"}},[e._v("#")]),e._v(" 动态路由和断言工厂")]),e._v(" "),a("p",[e._v("Gateway 会根据注册中心的服务列表，以注册中心上微服务名为路径创建动态路 由进行转发，从而实现动态路由的功能")]),e._v(" "),a("p",[e._v("需要在注册中心注册")]),e._v(" "),a("h3",{attrs:{id:"动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态路由"}},[e._v("#")]),e._v(" 动态路由")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 80\nspring:\n  application:\n    name: gateway-server\n  redis:\n    host: 124.222.237.176\n    port: 6379\n  cloud:\n    gateway:\n      enabled: true\n      discovery:\n        locator:\n          enabled: true # 开启动态路由\n          lower-case-service-id: true # 允许小写\n      routes:\n        - id: login-service-route\n          uri: http://localhost:8081\n          predicates: # 断言\n            - Path=/doLogin # 条件\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n    registry-fetch-interval-seconds: 3 # ????????????\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\n")])])]),a("p",[e._v("使用：")]),e._v(" "),a("p",[a("a",{attrs:{href:"http://localhost/login-service/doLogin",target:"_blank",rel:"noopener noreferrer"}},[e._v("localhost/login-service/doLogin"),a("OutboundLink")],1),e._v("    localhost/服务名/接口  就可以访问")]),e._v(" "),a("h3",{attrs:{id:"断言工厂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#断言工厂"}},[e._v("#")]),e._v(" 断言工厂")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("server:\n  port: 80\nspring:\n  application:\n    name: gateway-server\n  redis:\n    host: 124.222.237.176\n    port: 6379\n  cloud:\n    gateway:\n      enabled: true\n      discovery:\n        locator:\n          enabled: true # 开启动态路由\n          lower-case-service-id: true # 允许小写\n      routes:\n        - id: login-service-route\n#          uri: http://localhost:8081\n          uri: lb://login-service #使用lb协议 微服务名称做负均衡\n          predicates: # 断言匹配\n            - Path=/doLogin # 条件 可以使用正则\n            - After=2020-01-20T17:42:47.789-07:00[Asia/Shanghai] #此断言匹配发生在指定日期时间之后的请求，ZonedDateTime dateTime=ZonedDateTime.now()获得\n            - Method=GET,POST\n            - Query=username,cxs #查询路由断言工厂接受两个参数\neureka:\n  client:\n    service-url: # ???????\n      defaultZone: http://120.46.166.176:8761/eureka\n    registry-fetch-interval-seconds: 3 # ????????????\n  instance: # ????\n    instance-id: ${eureka.instance.hostname}:${spring.application.name}:${server.port} #?????????????\n    hostname: localhost # ??????? ???ip\n    prefer-ip-address: true #?ip????????????\n")])])]),a("h2",{attrs:{id:"过滤器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#过滤器"}},[e._v("#")]),e._v(" 过滤器")]),e._v(" "),a("p",[e._v("一般用于修改进入的请求和响应。")]),e._v(" "),a("p",[e._v("分类：pre post")]),e._v(" "),a("p",[e._v("分类 Gatewayilter GlobalFilter")]),e._v(" "),a("p",[e._v("Gatewayilter：针对某一个路由 做过滤    统计请求次数等等")]),e._v(" "),a("p",[e._v("GlobalFilter: 统计请求次数 限流 token的校验 ip黑名单 跨域   参数校验")]),e._v(" "),a("h3",{attrs:{id:"自定义过滤器-token校验"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义过滤器-token校验"}},[e._v("#")]),e._v(" 自定义过滤器-token校验")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/zhuchenghao1337/github-images/main/2022/20221231151307.png",alt:""}})]),e._v(" "),a("p",[e._v("为什么用网关来做token校验？")]),e._v(" "),a("p",[e._v("很多的服务都需要校验，在网关做token校验就会很好。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('@Configuration\npublic class TokenCheckFilter implements GlobalFilter, Ordered {\n    @Override\n    public int getOrder() { // 过滤器顺序\n        return 2;\n    }\n    /**\n     * 前后端约定：在请求头上带token 名为：Authorization\n     * 1.拿到url\n     * 2.判断是否需要token验证 否就直接放行\n     * 3.判断是否携带token\n     * 4.校验\n     * 5.放行/拦截\n     * @param exchange\n     * @param chain\n     * @return\n     */\n    public static final List<String> ALLOW_URL = Arrays.asList("/login-service/doLogin", "/doLogin");\n\n    @Autowired\n    private StringRedisTemplate stringRedisTemplate;\n\n    @Override\n    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {\n\n        ServerHttpRequest request = exchange.getRequest();\n        String path = request.getURI().getPath();\n        if (ALLOW_URL.contains(path)) {\n            return chain.filter(exchange);\n        }\n\n        List<String> authorization = request.getHeaders().get("Authorization");\n        if (!CollectionUtils.isEmpty(authorization)) {\n            String token = authorization.get(0);\n            if(StringUtils.hasText(token)) {\n                String realToken = token.replaceFirst("bearer ", "");\n                if(StringUtils.hasText(realToken) && stringRedisTemplate.hasKey(realToken)) {\n                    // 放行\n                    return chain.filter(exchange);\n                }\n            }\n        }\n        // 拦截\n        ServerHttpResponse response = exchange.getResponse();\n        response.getHeaders().set("content-type", "application/json;charset=utf-8");\n        HashMap<String, Object> map = new HashMap<>();\n        map.put("code", 401);\n        map.put("msg", "未授权");\n        ObjectMapper objectMapper = new ObjectMapper();\n        // 把map转化为字节\n        byte[] bytes = new byte[0];\n        try {\n            bytes = objectMapper.writeValueAsBytes(map);\n        } catch (JsonProcessingException e) {\n            e.printStackTrace();\n        }\n        DataBuffer wrap = response.bufferFactory().wrap(bytes);\n        return response.writeWith(Mono.just(wrap));\n    }\n}\n')])])]),a("h2",{attrs:{id:"跨域配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置"}},[e._v("#")]),e._v(" 跨域配置")]),e._v(" "),a("p",[e._v("网关是微服务的边缘，所有请求都要走网关，跨域的配置写在网关就很方便。")]),e._v(" "),a("p",[e._v("配置文件配置")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('import org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.cors.CorsConfiguration;\nimport org.springframework.web.cors.reactive.CorsWebFilter;\nimport org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;\nimport org.springframework.web.util.pattern.PathPatternParser;\n\n@Configuration\npublic class CorsConfig {\n\n    @Bean\n    public CorsWebFilter corsFilter() {\n        CorsConfiguration config = new CorsConfiguration();\n        config.addAllowedMethod("*");\n        config.addAllowedOrigin("*");\n        config.addAllowedHeader("*");\n        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(new PathPatternParser());\n        source.registerCorsConfiguration("/**", config);\n        return new CorsWebFilter(source);\n    }\n}\n')])])]),a("p",[e._v("yml配置跨域")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("spring:\n\tcloud:\n\t\tgateway:\n\t\t\tglobalcors:\n\t\t\t\tcorsConfigurations:\n\t\t\t\t\t'[/**]': // 针对哪些路径\n\t\t\t\t\t\tallowCredentials: true // 这个是可以携带 cookie\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);